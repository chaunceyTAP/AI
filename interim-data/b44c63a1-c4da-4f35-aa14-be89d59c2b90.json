{"guid":"b44c63a1-c4da-4f35-aa14-be89d59c2b90","title":"Configure the Android mobile application in Adobe Campaign","path":"help\\delivery\\using\\configuring-the-mobile-application-android.md","fullText":"---\nproduct: campaign\ntitle: Configure the Android mobile application in Adobe Campaign\ndescription: Learn how to set up your mobile application for Android\nfeature: Push\nrole: User, Developer\nexl-id: 32c35e61-d0a3-478f-b73b-396e2becf7f9\n---\n# Configuration steps for Android\n\nOnce the package is installed, you can define your Android app settings in Adobe Campaign Classic.\n\nKey steps are:\n\n1. [Configure the Android external account](#configuring-external-account-android)\n1. [Configure the Android service](#configuring-android-service)\n1. [Create the mobile app in Campaign](#creating-android-app)\n1. [Extend the app schema with additional data](#extend-subscription-schema)\n\nYou will then be able to [create an Android rich notification](create-notifications-android.md).\n\n>[!IMPORTANT]\n>\n>Some important changes to the Android Firebase Cloud Messaging (FCM) service will be released in 2024, and may impact your Adobe Campaign implementation. Your subscription services configuration for Android push messages may need to be updated to support this change. You can already check and take action. Learn more in this [Adobe Campaign v8 technote](https://experienceleague.adobe.com/docs/campaign/technotes-ac/tn-new/push-technote.html){target=\"_blank\"}.\n\n\n## Configure Android external account {#configuring-external-account-android}\n\nFor Android, two connectors are available:\n\n* The V1 connector which allows one connection per MTA child. \n* The V2 connector which allows simultaneous connections to the FCM server to improve throughput.\n\nTo choose which connector you want to use, follow these steps:\n\n1. Go to **[!UICONTROL Administration > Platform > External accounts]**.\n1. Select the **[!UICONTROL Android routing]** external account.\n1. In the **[!UICONTROL Connector]** tab, fill in the **[!UICONTROL JavaScript used in the connector]** field:\n\n   For Android V2: https://localhost:8080/nms/jsp/androidPushConnectorV2.js\n\n   >[!NOTE]\n   >\n   > You can also configure it as follow https://localhost:8080/nms/jsp/androidPushConnector.js but we advise you to use version 2 of the connector.\n\n   ![](assets/nmac_connectors3.png)\n\n1. For Android V2, one additional parameter is available in the Adobe Server configuration file (serverConf.xml):\n\n    * **maxGCMConnectPerChild**: Maximum limit of parallel HTTP requests to the FCM initiated by each child server (8 by default).\n\n## Configure an Android service {#configuring-android-service}\n\n![](assets/do-not-localize/how-to-video.png) [Learn how to configure an Android service in video](https://experienceleague.adobe.com/docs/campaign-classic-learn/getting-started-with-push-notifications-for-android/configuring-an-android-service-in-campaign.html#configuring-an-android-service-and-creating-an-android-mobile-application-in-campaign){target=\"_blank\"}.\n\n1. Go to the **[!UICONTROL Profiles and Targets > Services and subscriptions]** node and click **[!UICONTROL New]**.\n\n   ![](assets/nmac_service_1.png)\n\n1. Define a **[!UICONTROL Label]** and an **[!UICONTROL Internal name]**.\n1. Go to the **[!UICONTROL Type]** field and select **[!UICONTROL Mobile application]**.\n\n   >[!NOTE]\n   >\n   >The default **[!UICONTROL Subscriber applications (nms:appSubscriptionRcp)]** target mapping is linked to the recipients table. If you want to use a different target mapping, you need to create a new target mapping and enter it in the **[!UICONTROL Target mapping]** field of the service. For more on creating target mapping, refer to the [this section](../../configuration/using/about-custom-recipient-table.md).\n\n   ![](assets/nmac_ios.png)\n\n1. Then click the **[!UICONTROL Add]** button to select the application type.\n\n   ![](assets/nmac_service_2.png)\n\n1. Create your Android application. For more on this, refer to [this section](configuring-the-mobile-application-android.md#creating-android-app).\n\n## Create the Android mobile application {#creating-android-app}\n\nAfter creating your service, you now need to create your Android application:\n\n1. From your newly created service, click the **[!UICONTROL Add]** button to select the application type.\n\n   ![](assets/nmac_service_2.png)\n\n1. Select **[!UICONTROL Create an Android application]** and enter a **[!UICONTROL Label]**.\n\n   ![](assets/nmac_android.png)\n\n1. Make sure the same **[!UICONTROL Integration key]** is defined in Adobe Campaign and in the application code via the SDK. <!--For more on this, refer to [this section](integrating-campaign-sdk-into-the-mobile-application.md).-->\n\n    >[!NOTE]\n    >\n    > The **[!UICONTROL Integration key]** is fully customizable with string value but needs to be exactly the same as the one specified in the SDK.\n\n1. Select the **[!UICONTROL API version]**: HTTP v1 or HTTP (legacy). These configurations are detailed in [this section](#select-api-version)\n\n1. Fill in the **[!UICONTROL Firebase Cloud Messaging the Android connection settings]** fields.\n\n1. Click **[!UICONTROL Finish]** then **[!UICONTROL Save]**. Your Android application is now ready to be used in Campaign Classic.\n\nBy default, Adobe Campaign saves a key in the **[!UICONTROL User identifier]** (@userKey) field of the **[!UICONTROL Subscriber applications (nms:appSubscriptionRcp)]** table. This key enables you to link a subscription to a recipient. To collect additional data (such as a complex reconciliation key), you need to apply the following configuration:\n\n### Configure the API version{#select-api-version}\n\n>[!IMPORTANT]\n>\n>Some important changes to the Android Firebase Cloud Messaging (FCM) service will be released in 2024, and may impact your Adobe Campaign implementation. As part of Google's continual effort to improve its services, the legacy FCM APIs will be discontinued on **June 20, 2024**. Learn more in this [Adobe Campaign v8 technote](https://experienceleague.adobe.com/docs/campaign/technotes-ac/tn-new/push-technote.html){target=\"_blank\"}.\n\nAfter creating service and a new mobile application, you need to configure your mobile application. The **HTTP (legacy)** API should not be selected as it has been deprecated by Google. \n\nTo configure the HTTP v1 API version, follow the steps below:\n\n1. In your **[!UICONTROL Mobile application creation wizard]** window, select **[!UICONTROL HTTPV1]** in the **[!UICONTROL API version]** drop-down.\n\n1. Click **[!UICONTROL Load project json file to extract project details...]** to load directly your JSON key file. For more information on how to extract your JSON file, refer to [this page](https://firebase.google.com/docs/admin/setup#initialize-sdk).\n\n   You can also enter manually the following details:\n      * **[!UICONTROL Project Id]**\n      * **[!UICONTROL Private Key]**\n      * **[!UICONTROL Client Email]**\n\n   ![](assets/nmac_android_10.png)\n\n1. Click **[!UICONTROL Test the connection]** to check that your configuration is correct and that the marketing server has access to the FCM.\n\n   >[!CAUTION]\n   >\n   >For Mid-Sourcing Deployment, the **[!UICONTROL Test connection]** button will not check if the MID server has access to the FCM server.\n\n   ![](assets/nmac_android_11.png)\n\n1. As an option, you can enrich a push message content with some **[!UICONTROL Application variables]** if needed. These are fully customizable and a part of the message payload sent to the mobile device.\n\n1. Click **[!UICONTROL Finish]** then **[!UICONTROL Save]**. Your Android application is now ready to be used in Campaign Classic.\n\nBelow are the FCM payload names to further personalize your push notification:\n\n| Message type | Configurable message element (FCM payload name) |  Configurable options (FCM payload name) |\n|:-:|:-:|:-:|\n| data message  | N/A  | validate_only  |\n| notification message |  title, body, android_channel_id, icon, sound, tag, color, click_action, image, ticker, sticky, visibility, notification_priority, notification_count <br> | validate_only |\n\n## Extend the appsubscriptionRcp schema {#extend-subscription-schema}\n\n![](assets/do-not-localize/how-to-video.png) [Learn how to extend the appsubscriptionRcp schema in video](https://experienceleague.adobe.com/docs/campaign-classic-learn/getting-started-with-push-notifications-for-android/extending-the-app-subscription-schema.html#extending-the-app-subscription-schema-to-personalize-push-notifications)\n\nYou need to extend the **appsubscriptionRcp** to define new additional fields to store parameters from the app in Campaign database. These fields are used for personalization for example. To do this:\n\n1. Create an extension of the **[!UICONTROL Subscriber applications (nms:appsubscriptionRcp)]** schema and define the new fields. Learn more about schema extension in [this page](../../configuration/using/about-schema-edition.md)\n\n1. Define the mapping in the **[!UICONTROL Subscription parameters]** tab.\n\n   >[!CAUTION]\n   >\n   >Make sure the configuration names in the **[!UICONTROL Subscription parameters]** tab are the same as those in the mobile application code. <!--Refer to [this section](integrating-campaign-sdk-into-the-mobile-application.md).-->\n","headers":[["title","Configure the Android mobile application in Adobe Campaign"],["description","Learn how to set up your mobile application for Android"],["feature","Push"]],"sections":[{"section":"Configuration steps for Android","sectionId":"b7d015fd-8e2e-46d9-b93e-bf9e05da2070","paragraphs":["Once the package is installed, you can define your Android app settings in Adobe Campaign Classic.","Key steps are:","Configure the Android external account\nConfigure the Android service\nCreate the mobile app in Campaign\nExtend the app schema with additional data","You will then be able to create an Android rich notification.","IMPORTANT","Some important changes to the Android Firebase Cloud Messaging (FCM) service will be released in 2024, and may impact your Adobe Campaign implementation. Your subscription services configuration for Android push messages may need to be updated to support this change. You can already check and take action. Learn more in this Adobe Campaign v8 technote."]},{"section":"Configure Android external account","sectionId":"4435310a-5181-4965-b925-3d8d00c06600","paragraphs":["For Android, two connectors are available:","The V1 connector which allows one connection per MTA child. \nThe V2 connector which allows simultaneous connections to the FCM server to improve throughput.","To choose which connector you want to use, follow these steps:","Go to Administration > Platform > External accounts.","Select the Android routing external account.","In the Connector tab, fill in the JavaScript used in the connector field:","For Android V2: https://localhost:8080/nms/jsp/androidPushConnectorV2.js","NOTE","You can also configure it as follow https://localhost:8080/nms/jsp/androidPushConnector.js but we advise you to use version 2 of the connector.","For Android V2, one additional parameter is available in the Adobe Server configuration file (serverConf.xml):","maxGCMConnectPerChild: Maximum limit of parallel HTTP requests to the FCM initiated by each child server (8 by default)."]},{"section":"Configure an Android service","sectionId":"e691e450-610d-4da2-b244-1d3ef53bbbc1","paragraphs":["Learn how to configure an Android service in video.","Go to the Profiles and Targets > Services and subscriptions node and click New.","Define a Label and an Internal name.","Go to the Type field and select Mobile application.","NOTE","The default Subscriber applications (nms:appSubscriptionRcp) target mapping is linked to the recipients table. If you want to use a different target mapping, you need to create a new target mapping and enter it in the Target mapping field of the service. For more on creating target mapping, refer to the this section.","Then click the Add button to select the application type.","Create your Android application. For more on this, refer to this section."]},{"section":"Create the Android mobile application","sectionId":"2e002085-96a1-42df-aa6f-f253e051cf4f","paragraphs":["After creating your service, you now need to create your Android application:","From your newly created service, click the Add button to select the application type.","Select Create an Android application and enter a Label.","Make sure the same Integration key is defined in Adobe Campaign and in the application code via the SDK.","NOTE","The Integration key is fully customizable with string value but needs to be exactly the same as the one specified in the SDK.","Select the API version: HTTP v1 or HTTP (legacy). These configurations are detailed in this section","Fill in the Firebase Cloud Messaging the Android connection settings fields.","Click Finish then Save. Your Android application is now ready to be used in Campaign Classic.","By default, Adobe Campaign saves a key in the User identifier (@userKey) field of the Subscriber applications (nms:appSubscriptionRcp) table. This key enables you to link a subscription to a recipient. To collect additional data (such as a complex reconciliation key), you need to apply the following configuration:"]},{"section":"Configure the API version","sectionId":"9908805e-7e27-43f5-ab8f-07ba0fdb91c3","paragraphs":["IMPORTANT","Some important changes to the Android Firebase Cloud Messaging (FCM) service will be released in 2024, and may impact your Adobe Campaign implementation. As part of Google's continual effort to improve its services, the legacy FCM APIs will be discontinued on June 20, 2024. Learn more in this Adobe Campaign v8 technote.","After creating service and a new mobile application, you need to configure your mobile application. The HTTP (legacy) API should not be selected as it has been deprecated by Google.","To configure the HTTP v1 API version, follow the steps below:","In your Mobile application creation wizard window, select HTTPV1 in the API version drop-down.","Click Load project json file to extract project details... to load directly your JSON key file. For more information on how to extract your JSON file, refer to this page.","You can also enter manually the following details:","Project Id\nPrivate Key\nClient Email","Click Test the connection to check that your configuration is correct and that the marketing server has access to the FCM.","CAUTION","For Mid-Sourcing Deployment, the Test connection button will not check if the MID server has access to the FCM server.","As an option, you can enrich a push message content with some Application variables if needed. These are fully customizable and a part of the message payload sent to the mobile device.","Click Finish then Save. Your Android application is now ready to be used in Campaign Classic.","Below are the FCM payload names to further personalize your push notification:","Message type Configurable message element (FCM payload name) Configurable options (FCM payload name)\ndata message N/A validate_only\nnotification message title, body, android_channel_id, icon, sound, tag, color, click_action, image, ticker, sticky, visibility, notification_priority, notification_count  validate_only"]},{"section":"Extend the appsubscriptionRcp schema","sectionId":"2ae679de-4e3e-4649-9848-10422e83364d","paragraphs":["Learn how to extend the appsubscriptionRcp schema in video","You need to extend the appsubscriptionRcp to define new additional fields to store parameters from the app in Campaign database. These fields are used for personalization for example. To do this:","Create an extension of the Subscriber applications (nms:appsubscriptionRcp) schema and define the new fields. Learn more about schema extension in this page","Define the mapping in the Subscription parameters tab.","CAUTION","Make sure the configuration names in the Subscription parameters tab are the same as those in the mobile application code."]}]}