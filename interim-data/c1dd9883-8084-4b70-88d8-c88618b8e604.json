{"guid":"c1dd9883-8084-4b70-88d8-c88618b8e604","title":"Edit forms","path":"help\\configuration\\using\\editing-forms.md","fullText":"---\nproduct: campaign\ntitle: Edit forms\ndescription: Edit forms\nfeature: Configuration\nrole: Data Engineer, Developer\nbadge-v8: label=\"Also applies to v8\" type=\"Positive\" tooltip=\"Also applies to Campaign v8\"\nexl-id: 24604dc9-f675-4e37-a848-f1911be84f3e\n---\n\n# Edit forms{#editing-forms}\n\n## Overview\n\nMarketers and operators use input forms to create, modify, and preview records. Forms show a visual representation of information.\n\nYou can create and modify input forms:\n\n* You can modify the factory input forms that are delivered by default. The factory input forms are based on the factory data schemas.\n* You can create custom input forms, based on data schemas that you define.\n\nForms are entities of `xtk:form` type. You can view the input form structure in the `xtk:form` schema. To view this schema, choose **[!UICONTROL Administration]** > **[!UICONTROL Configuration]** > **[!UICONTROL Data schemas]** from the menu. Read more about [form structure](form-structure.md).\n\nTo access input forms, choose **[!UICONTROL Administration] > [!UICONTROL Configuration] > [!UICONTROL Input forms]** from the menu:\n\n![](assets/d_ncs_integration_form_arbo.png)\n\nTo design forms, edit the XML content in the XML editor:\n\n![](assets/d_ncs_integration_form_edit.png)\n\n[Read more](form-structure.md#formatting).\n\nTo preview a form, click the **[!UICONTROL Preview]** tab:\n\n![](assets/d_ncs_integration_form_preview.png)\n\n## Form types\n\nYou can create different types of input forms. The form type determines how users navigate the form:\n\n* Console screen \n\n  This is the default form type. The form comprises a single page.\n\n  ![](assets/console_screen_form.png)\n\n* Content Management\n\n  Use this form type for content management. See this [use case](../../delivery/using/use-case-creating-content-management.md).\n\n  ![](../../delivery/using/assets/d_ncs_content_form13.png)\n\n* Wizard\n\n  This form comprises multiple floating screens that are ordered in a specific sequences. Users navigate from one screen to the next. [Read more](form-structure.md#wizards).\n\n* Iconbox\n\n  This form comprises multiple pages. To navigate the form, users select icons at the left of the form.\n\n  ![](assets/iconbox_form_preview.png)\n\n* Notebook\n\n  This form comprises multiple pages. To navigate the form, users select tabs at the top of the form.\n\n  ![](assets/notebook_form_preview.png)\n\n* Vertical pane\n\n  This form shows a navigation tree.\n\n* Horizontal pane\n\n  This form shows a list of items.\n\n## Containers\n\nIn forms, you can use containers for various purposes:\n\n* Organize content within forms\n* Define access to input fields\n* Nest forms within other forms\n\n[Read more](form-structure.md#containers).\n\n### Organize content\n\nUse containers to organize content within forms:\n\n* You can group fields into sections.\n* You can add pages to multipage forms.\n\nTo insert a container, use the `<container>` element. [Read more](form-structure.md#containers).\n\n#### Group fields\n\nUse containers to group input fields into organized sections.\n\nTo insert a section into a form, use this element: `<container type=\"frame\">`. Optionally, to add a section title, use the `label` attribute.\n\nSyntax: `<container type=\"frame\" label=\"`*section_title*`\"> […] </container>`\n\n  In this example, a container defines the **Creation** section, which comprises the **[!UICONTROL Created by]** and **[!UICONTROL Name]** input fields:\n\n```xml\n<form _cs=\"Coupons (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Coupons\"\n      name=\"coupon\" namespace=\"nms\" type=\"default\" xtkschema=\"xtk:form\">\n  <input xpath=\"@code\"/>\n  <input xpath=\"@type\"/>\n  <container label=\"Creation\" type=\"frame\">\n    <input xpath=\"createdBy\"/>\n    <input xpath=\"createdBy/@name\"/>\n  </container>\n</form>\n```\n\n![](assets/console_screen_form.png)\n\n#### Add pages to multipage forms\n\nFor multipage forms, use a container to create a form page.\n\nThis example shows containers for the **General** and **Details** pages of a form:\n\n```xml\n<container img=\"ncm:book.png\" label=\"General\">\n[…]\n</container>\n<container img=\"ncm:detail.png\" label=\"Details\">\n[…]\n</container>\n```\n\n### Define access to fields\n\nUse containers to define what is visible and to define access to fields. You can turn on or off groups of fields.\n\n### Nest forms\n\nUse containers to nest forms within other forms. [Read more](#add-pages-to-multipage-forms).\n\n## References to images\n\nTo find images, choose **[!UICONTROL Administration]** > **[!UICONTROL Configuration]** > **[!UICONTROL Images]** from the menu.\n\nTo associate an image with an element in the form, for example, an icon, you can add a reference to an image. Use the `img` attribute, for example, in the `<container>` element.\n\nSyntax: `img=\"`*`namespace`*`:`*`filename`*`.`*`extension`*`\"`\n\nThis example shows references to the `book.png` and `detail.png` images from the `ncm` namespace:\n\n```xml\n<container img=\"ncm:book.png\" label=\"General\">\n[…]\n</container>\n<container img=\"ncm:detail.png\" label=\"Details\">\n[…]\n</container>\n```\n\nThese images are used for icons that users click to navigate a multipage form:\n\n![](assets/nested_forms_preview.png)\n\n\n## Create a simple form {#create-simple-form}\n\nTo create a form, follow these steps:\n\n1. From the menu, choose **[!UICONTROL Administration]** > **[!UICONTROL Configuration]** > **[!UICONTROL Input forms]**.\n1. Click the **[!UICONTROL New]** button at the top right of the list.\n\n    ![](assets/input-form-create-1.png)\n\n1. Specify the form properties:\n\n   * Specify the form name and the namespace.\n      \n      The form name and the namespace can match the related data schema.  This example shows a form for the `cus:order` data schema:\n\n      ```xml\n      <form entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Order\" name=\"order\" namespace=\"cus\" type=\"iconbox\" xtkschema=\"xtk:form\">\n        […]\n      </form>\n      ```\n\n     Alternatively, you can explicitly specify the data schema in the `entity-schema` attribute.\n    \n     ```xml\n     <form entity-schema=\"cus:stockLine\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Stock order\" name=\"stockOrder\" namespace=\"cus\" xtkschema=\"xtk:form\">\n       […]\n     </form>\n     ```\n\n   * Specify the label to be displayed on the form.\n   * Optionally, specify the form type. If you do not specify a form type, the console screen type is used by default.\n\n      ![](assets/input-form-create-2.png)\n\n       If you are designing a multipage form, you can omit the form type in the `<form>` element and specify the type in a container.\n\n1. Click **[!UICONTROL Save]**.\n\n1. Insert the form elements.\n   \n   For example, to insert an input field, use the `<input>` element. Set the `xpath` attribute to the field reference as an XPath expression. [Read more](schema-structure.md#referencing-with-xpath).\n\n   This example shows input fields based on the `nms:recipient` schema.\n\n   ```xml\n   <input xpath=\"@firstName\"/>\n   <input xpath=\"@lastName\"/>\n   ```\n\n1. If the form is based on a specific schema type, you can look up the fields for this schema:\n\n   1. Click **[!UICONTROL Insert]** > **[!UICONTROL Document fields]**.\n\n      ![](assets/input-form-create-4.png)\n\n   1. Select the field and click **[!UICONTROL OK]**.\n    \n      ![](assets/input-form-create-5.png)\n\n1. Optionally, specify the field editor.\n\n   A default field editor is associated with each data type:\n   * For a date-type field, the form shows an input calendar.\n   * For an enumeration-type field, the form shows a selection list.\n\n   You can use these field editor types:\n  \n   | Field editor | Form attribute |\n   | --- | --- |\n   | Radio button | `type=\"radiobutton\"` |\n   | Checkbox | `type=\"checkbox\"` |\n   | Edit tree | `type=\"tree\"` |\n\n    Read more about [memory list controls](form-structure.md#memory-list-controls).\n\n1. Optionally, define access to the fields:\n\n   | Element | Attribute | Description |\n   | --- | --- | --- |\n   | `<input>` | `read-only=\"true\"` | Provides read-only access to a field |\n   | `<container>` | `type=\"visibleGroup\" visibleIf=\"`*edit-expr*`\"` | Conditionally displays a group of fields |\n   | `<container>` | `type=\"enabledGroup\" enabledIf=\"`*edit-expr*`\"` | Conditionally enables a group of fields |\n\n   Example:\n   \n   ```xml\n   <container type=\"enabledGroup\" enabledIf=\"@gender=1\">\n     […]\n   </container>\n   <container type=\"enabledGroup\" enabledIf=\"@gender=2\">\n     […]\n   </container>\n   ```\n\n1. Optionally, use containers to group fields into sections.\n\n   ```xml\n   <container type=\"frame\" label=\"Name\">\n      <input xpath=\"@firstName\"/>\n      <input xpath=\"@lastName\"/>\n   </container>\n   <container type=\"frame\" label=\"Contact details\">\n      <input xpath=\"@email\"/>\n      <input xpath=\"@phone\"/>\n   </container>\n   ```\n\n   ![](assets/input-form-create-3.png)\n\n## Create a multipage form {#create-multipage-form}\n\nYou can create multipage forms. You can also nest forms within other forms.\n\n### Create an `iconbox` form\n\nUse the `iconbox` form type to show icons at the left of the form, which take users to different pages in the form.\n\n![](assets/iconbox_form_preview.png)\n\nTo change the type of an existing form to `iconbox`, follow these steps:\n\n1. Change the `type` attribute of the `<form>` element to `iconbox`: \n   \n   ```xml\n   <form […] type=\"iconbox\">\n   ```\n\n1. Set a container for each form page:\n\n   1. Add a `<container>` element as a child of the `<form>` element.\n   1. To define a label and an image for the icon, use the `label` and `img` attributes.\n\n      ```xml\n      <form entitySchema=\"xtk:form\" name=\"Service provider\" namespace=\"nms\" type=\"iconbox\" xtkschema=\"xtk:form\">\n          <container img=\"xtk:properties.png\" label=\"General\">\n              <input xpath=\"@label\"/>\n              <input xpath=\"@name\"/>\n              […]\n          </container>\n          <container img=\"nms:msgfolder.png\" label=\"Details\">\n              <input xpath=\"@address\"/>\n              […]\n          </container>\n          <container img=\"nms:supplier.png\" label=\"Services\">\n              […]\n          </container>\n      </form>\n      ```\n\n     Alternatively, remove the `type=\"frame\"` attribute from the existing `<container>` elements.\n\n### Create a notebook form\n\nUse the `notebook` form type to show tabs at the top of the form, which take users to different pages.\n\n![](assets/notebook_form_preview.png)\n\nTo change the type of an existing form to `notebook`, follow these steps:\n\n1. Change the `type` attribute of the `<form>` element to `notebook`:\n\n   ```xml\n   <form […] type=\"notebook\">\n   ```\n\n1. Add a container for each form page:\n\n    1. Add a `<container>` element as a child of the `<form>` element.\n    1. To define the label and the image for the icon, use the `label` and `img` attributes.\n\n    ```xml\n      <form entitySchema=\"xtk:form\" name=\"Service provider\" namespace=\"nms\" type=\"notebook\" xtkschema=\"xtk:form\">\n          <container label=\"General\">\n              <input xpath=\"@label\"/>\n              <input xpath=\"@name\"/>\n              […]\n          </container>\n          <container label=\"Details\">\n              <input xpath=\"@address\"/>\n              […]\n          </container>\n          <container label=\"Services\">\n              […]\n          </container>\n      </form>\n    ```\n\n   Alternatively, remove the `type=\"frame\"` attribute from the existing `<container>` elements.\n\n### Nest forms\n\nYou can nest forms within other forms. For example, you can nest notebook forms within iconbox forms.\n\nThe level of nesting controls navigation. Users can drill down to subforms. \n\nTo nest a form within another form, insert a `<container>` element and set the `type` attribute to the form type. For the top-level form, you can set the form type in an outer container or in the `<form>` element.\n\n### Example\n\nThis example shows a complex form:\n\n* The top-level form is an iconbox form. This form comprises two containers labelled **General** and **Details**.\n\n  As a result, the outer form shows the **General** and **Details** pages at the top level. To access these pages, users click the icons at the left of the form.\n\n* The subform is an notebook form that is nested within the **General** container. The subform comprises two containers that are labelled **Name** and **Contact**.\n\n```xml\n<form _cs=\"Profile (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Profile\" name=\"profile\" namespace=\"nms\" xtkschema=\"xtk:form\">\n  <container type=\"iconbox\">\n    <container img=\"ncm:general.png\" label=\"General\">\n      <container type=\"notebook\">\n        <container label=\"Name\">\n          <input xpath=\"@firstName\"/>\n          <input xpath=\"@lastName\"/>\n        </container>\n        <container label=\"Contact\">\n          <input xpath=\"@email\"/>\n        </container>\n      </container>\n    </container>\n    <container img=\"ncm:detail.png\" label=\"Details\">\n      <input xpath=\"@birthDate\"/>\n    </container>\n  </container>\n</form>\n```\n\n  As a result, the **General** page of the outer form shows the **Name** and **Contact** tabs.\n\n![](assets/nested_forms_preview.png)\n\nTo nest a form within another form, insert a `<container>` element and set the `type` attribute to the form type. For the top-level form, you can set the form type in an outer container or in the `<form>` element.\n\n### Example\n\nThis example shows a complex form:\n\n* The top-level form is an iconbox form. This form comprises two containers labelled **General** and **Details**.\n\n  As a result, the outer form shows the **General** and **Details** pages at the top level. To access these pages, users click the icons at the left of the form.\n\n* The subform is an notebook form that is nested within the **General** container. The subform comprises two containers that are labelled **Name** and **Contact**.\n\n```xml\n<form _cs=\"Profile (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Profile\" name=\"profile\" namespace=\"nms\" xtkschema=\"xtk:form\">\n  <container type=\"iconbox\">\n    <container img=\"ncm:general.png\" label=\"General\">\n      <container type=\"notebook\">\n        <container label=\"Name\">\n          <input xpath=\"@firstName\"/>\n          <input xpath=\"@lastName\"/>\n        </container>\n        <container label=\"Contact\">\n          <input xpath=\"@email\"/>\n        </container>\n      </container>\n    </container>\n    <container img=\"ncm:detail.png\" label=\"Details\">\n      <input xpath=\"@birthDate\"/>\n    </container>\n  </container>\n</form>\n```\n\n  As a result, the **General** page of the outer form shows the **Name** and **Contact** tabs.\n\n![](assets/nested_forms_preview.png)\n\n\n\n## Modify a factory input form {#modify-factory-form}\n\nTo modify a factory form, follow these steps:\n\n1. Modify the factory input form:\n\n   1. From the menu, choose **[!UICONTROL Administration]** > **[!UICONTROL Configuration]** > **[!UICONTROL Input forms]**.\n   1. Select an input form and modify it.\n\n    You can extend factory data schemas, but you cannot extend factory input forms. We recommend that you modify factory input forms directly without recreating them. During software upgrades, your modifications in the factory input forms are merged with the upgrades. If the automatic merge fails, you can resolve the conflicts. [Read more](../../production/using/upgrading.md#resolving-conflicts).\n\n    For example, if you extend a factory schema with an additional field, you can add this field to the related factory form.\n\n## Validate forms {#validate-forms}\n\nYou can include validation controls in forms.\n\n### Grant read-only access to fields\n\nTo grant read-only access to a field, use the `readOnly=\"true\"` attribute. For example, you might want to show the primary key of a record, but with read-only access. [Read more](form-structure.md#non-editable-fields).\n\nIn this example, the primary key (`iRecipientId`) of the `nms:recipient` schema is displayed in read-only access:\n\n```xml\n<value xpath=\"@iRecipientId\" readOnly=\"true\"/>\n```\n\n### Check mandatory fields \n\nYou can check mandatory information:\n\n* Use the `required=\"true\"` attribute for the required fields.\n* Use the `<leave>` node to check these fields and show error messages.\n\nIn this example, the email address is required, and an error message is displayed if the user has not provided this information:\n\n```xml\n<input xpath=\"@email\" required=\"true\"/>\n<leave>\n  <check expr=\"@email!=''\">\n    <error>The email address is required.</error>\n  </check>\n</leave>\n```\n\nRead more about [expression fields](form-structure.md#expression-field) and [form context](form-structure.md#context-of-forms).\n\n### Validate values\n\nYou can use JavaScript SOAP calls to validate form data from the Console. Use these calls for complex validation, for example, to check a value against a list of authorized values. [Read more](form-structure.md#soap-methods).\n\n1. Create a validation function in a JS file.\n\n   Example:\n\n    ```js\n    function nms_recipient_checkValue(value)\n    {\n      logInfo(\"checking value \" + value)\n      if (…)\n      {\n        logError(\"Value \" + value + \" is not valid\")\n      }\n      return 1\n    }\n    ```\n\n    In this example, the function is named `checkValue`. This function is used to check the `recipient` data type in the `nms` namespace. The value that is being checked is logged. If the value is not valid, then an error message is logged. If the value is valid, then the value 1 is returned.\n\n    You can use the returned value to modify the form.\n\n1. In the form, add the `<soapCall>` element to the `<leave>` element.\n\n    In this example, a SOAP call is used to validate the `@valueToCheck` string:\n\n    ```xml\n    <form name=\"recipient\" (…)>\n    (…)\n      <leave>\n        <soapCall name=\"checkValue\" service=\"nms:recipient\">\n          <param exprIn=\"@valueToCheck\" type=\"string\"/>\n        </soapCall>\n      </leave>\n    </form>\n    ```\n\n   In this example, the `checkValue` method and the `nms:recipient` service are used:\n\n   * The service is the namespace and the data type.\n   * The method is the function name. The name is case-sensitive.\n      \n    The call is performed synchronously.\n\n    All exceptions are displayed. If you use the `<leave>` element, then users cannot save the form until the entered information is validated.\n\nThis example shows how you can make service calls from within forms:\n\n```xml\n<enter>\n  <soapCall name=\"client\" service=\"c4:ybClient\">\n    <param exprIn=\"@id\" type=\"string\"/>\n    <param type=\"boolean\" xpathOut=\"/tmp/@count\"/>\n  </soapCall>\n</enter>\n```\n\nIn this example, the input is an ID, which is a primary key. When users fill the form for this ID, a SOAP call is made with this ID as the input parameter. The output is a boolean that is written to this field: `/tmp/@count`. You can use this boolean inside the form. Read more about [form context](form-structure.md#context-of-forms).\n","headers":[["title","Edit forms"],["description","Edit forms"],["feature","Configuration"]],"sections":[{"section":"Edit forms","sectionId":"ff6ebe5b-b84a-46c9-a0e0-853361706f10","paragraphs":[]},{"section":"Overview","sectionId":"e5c6e423-2a8e-4ed0-a235-e6f844d960e9","paragraphs":["Marketers and operators use input forms to create, modify, and preview records. Forms show a visual representation of information.","You can create and modify input forms:","You can modify the factory input forms that are delivered by default. The factory input forms are based on the factory data schemas.\nYou can create custom input forms, based on data schemas that you define.","Forms are entities of xtk:form type. You can view the input form structure in the xtk:form schema. To view this schema, choose Administration > Configuration > Data schemas from the menu. Read more about form structure.","To access input forms, choose Administration > Configuration > Input forms from the menu:","To design forms, edit the XML content in the XML editor:","Read more.","To preview a form, click the Preview tab:"]},{"section":"Form types","sectionId":"44fd3bad-cc26-4285-a3ef-9b1e7d9048b2","paragraphs":["You can create different types of input forms. The form type determines how users navigate the form:","Console screen","This is the default form type. The form comprises a single page.","Content Management","Use this form type for content management. See this use case.","Wizard","This form comprises multiple floating screens that are ordered in a specific sequences. Users navigate from one screen to the next. Read more.","Iconbox","This form comprises multiple pages. To navigate the form, users select icons at the left of the form.","Notebook","This form comprises multiple pages. To navigate the form, users select tabs at the top of the form.","Vertical pane","This form shows a navigation tree.","Horizontal pane","This form shows a list of items."]},{"section":"Containers","sectionId":"80aa2e2a-68ae-489c-b317-cc25579adb02","paragraphs":["In forms, you can use containers for various purposes:","Organize content within forms\nDefine access to input fields\nNest forms within other forms","Read more."]},{"section":"Organize content","sectionId":"8fcf2311-9ac3-4cb1-964a-730770aa5426","paragraphs":["Use containers to organize content within forms:","You can group fields into sections.\nYou can add pages to multipage forms.","To insert a container, use the <container> element. Read more."]},{"section":"Group fields","sectionId":"2ba69870-4ea1-4dd4-a9ee-d8a1f655ca93","paragraphs":["Use containers to group input fields into organized sections.","To insert a section into a form, use this element: <container type=\"frame\">. Optionally, to add a section title, use the label attribute.","Syntax: <container type=\"frame\" label=\"section_title\"> […] </container>","In this example, a container defines the Creation section, which comprises the Created by and Name input fields:","<form _cs=\"Coupons (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Coupons\"\n      name=\"coupon\" namespace=\"nms\" type=\"default\" xtkschema=\"xtk:form\">\n  <input xpath=\"@code\"/>\n  <input xpath=\"@type\"/>\n  <container label=\"Creation\" type=\"frame\">\n    <input xpath=\"createdBy\"/>\n    <input xpath=\"createdBy/@name\"/>\n  </container>\n</form>"]},{"section":"Add pages to multipage forms","sectionId":"26779bba-d561-44dd-b13b-e3540e37e9a8","paragraphs":["For multipage forms, use a container to create a form page.","This example shows containers for the General and Details pages of a form:","<container img=\"ncm:book.png\" label=\"General\">\n[…]\n</container>\n<container img=\"ncm:detail.png\" label=\"Details\">\n[…]\n</container>"]},{"section":"Define access to fields","sectionId":"a3010565-d5a6-45fa-b90f-3fb545121777","paragraphs":["Use containers to define what is visible and to define access to fields. You can turn on or off groups of fields."]},{"section":"Nest forms","sectionId":"552f2c2f-99c1-469c-bfe9-e4e7e94e481f","paragraphs":["Use containers to nest forms within other forms. Read more."]},{"section":"References to images","sectionId":"f2ed5714-68b2-4c9a-b011-e711f6cf22b9","paragraphs":["To find images, choose Administration > Configuration > Images from the menu.","To associate an image with an element in the form, for example, an icon, you can add a reference to an image. Use the img attribute, for example, in the <container> element.","Syntax: img=\"namespace:filename.extension\"","This example shows references to the book.png and detail.png images from the ncm namespace:","<container img=\"ncm:book.png\" label=\"General\">\n[…]\n</container>\n<container img=\"ncm:detail.png\" label=\"Details\">\n[…]\n</container>","These images are used for icons that users click to navigate a multipage form:"]},{"section":"Create a simple form","sectionId":"721f858c-6348-4f98-90a9-8c094b546533","paragraphs":["To create a form, follow these steps:","From the menu, choose Administration > Configuration > Input forms.","Click the New button at the top right of the list.","","Specify the form properties:","Specify the form name and the namespace.","The form name and the namespace can match the related data schema.  This example shows a form for the cus:order data schema:","<form entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Order\" name=\"order\" namespace=\"cus\" type=\"iconbox\" xtkschema=\"xtk:form\">\n  […]\n</form>","Alternatively, you can explicitly specify the data schema in the entity-schema attribute.","<form entity-schema=\"cus:stockLine\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Stock order\" name=\"stockOrder\" namespace=\"cus\" xtkschema=\"xtk:form\">\n  […]\n</form>","Specify the label to be displayed on the form.","Optionally, specify the form type. If you do not specify a form type, the console screen type is used by default.","","If you are designing a multipage form, you can omit the form type in the <form> element and specify the type in a container.","Click Save.","Insert the form elements.","For example, to insert an input field, use the <input> element. Set the xpath attribute to the field reference as an XPath expression. Read more.","This example shows input fields based on the nms:recipient schema.","<input xpath=\"@firstName\"/>\n<input xpath=\"@lastName\"/>","If the form is based on a specific schema type, you can look up the fields for this schema:","Click Insert > Document fields.","Select the field and click OK.","Optionally, specify the field editor.","A default field editor is associated with each data type:","For a date-type field, the form shows an input calendar.\nFor an enumeration-type field, the form shows a selection list.","You can use these field editor types:","Field editor Form attribute\nRadio button type=\"radiobutton\"\nCheckbox type=\"checkbox\"\nEdit tree type=\"tree\"","Read more about memory list controls.","Optionally, define access to the fields:","Element Attribute Description\n<input> read-only=\"true\" Provides read-only access to a field\n<container> type=\"visibleGroup\" visibleIf=\"edit-expr\" Conditionally displays a group of fields\n<container> type=\"enabledGroup\" enabledIf=\"edit-expr\" Conditionally enables a group of fields","Example:","<container type=\"enabledGroup\" enabledIf=\"@gender=1\">\n  […]\n</container>\n<container type=\"enabledGroup\" enabledIf=\"@gender=2\">\n  […]\n</container>","Optionally, use containers to group fields into sections.","<container type=\"frame\" label=\"Name\">\n   <input xpath=\"@firstName\"/>\n   <input xpath=\"@lastName\"/>\n</container>\n<container type=\"frame\" label=\"Contact details\">\n   <input xpath=\"@email\"/>\n   <input xpath=\"@phone\"/>\n</container>"]},{"section":"Create a multipage form","sectionId":"d43bd723-2e1b-4f63-88ad-9f916b2a2ecc","paragraphs":["You can create multipage forms. You can also nest forms within other forms.","Create an iconbox form","Use the iconbox form type to show icons at the left of the form, which take users to different pages in the form.","To change the type of an existing form to iconbox, follow these steps:","Change the type attribute of the <form> element to iconbox:","<form […] type=\"iconbox\">","Set a container for each form page:","Add a <container> element as a child of the <form> element.","To define a label and an image for the icon, use the label and img attributes.","<form entitySchema=\"xtk:form\" name=\"Service provider\" namespace=\"nms\" type=\"iconbox\" xtkschema=\"xtk:form\">\n    <container img=\"xtk:properties.png\" label=\"General\">\n        <input xpath=\"@label\"/>\n        <input xpath=\"@name\"/>\n        […]\n    </container>\n    <container img=\"nms:msgfolder.png\" label=\"Details\">\n        <input xpath=\"@address\"/>\n        […]\n    </container>\n    <container img=\"nms:supplier.png\" label=\"Services\">\n        […]\n    </container>\n</form>","Alternatively, remove the type=\"frame\" attribute from the existing <container> elements.","Create a notebook form","Use the notebook form type to show tabs at the top of the form, which take users to different pages.","To change the type of an existing form to notebook, follow these steps:","Change the type attribute of the <form> element to notebook:","<form […] type=\"notebook\">","Add a container for each form page:","Add a <container> element as a child of the <form> element.\nTo define the label and the image for the icon, use the label and img attributes.","<form entitySchema=\"xtk:form\" name=\"Service provider\" namespace=\"nms\" type=\"notebook\" xtkschema=\"xtk:form\">\n      <container label=\"General\">\n          <input xpath=\"@label\"/>\n          <input xpath=\"@name\"/>\n          […]\n      </container>\n      <container label=\"Details\">\n          <input xpath=\"@address\"/>\n          […]\n      </container>\n      <container label=\"Services\">\n          […]\n      </container>\n  </form>","Alternatively, remove the type=\"frame\" attribute from the existing <container> elements.","Nest forms","You can nest forms within other forms. For example, you can nest notebook forms within iconbox forms.","The level of nesting controls navigation. Users can drill down to subforms.","To nest a form within another form, insert a <container> element and set the type attribute to the form type. For the top-level form, you can set the form type in an outer container or in the <form> element.","Example","This example shows a complex form:","The top-level form is an iconbox form. This form comprises two containers labelled General and Details.","As a result, the outer form shows the General and Details pages at the top level. To access these pages, users click the icons at the left of the form.","The subform is an notebook form that is nested within the General container. The subform comprises two containers that are labelled Name and Contact.","<form _cs=\"Profile (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Profile\" name=\"profile\" namespace=\"nms\" xtkschema=\"xtk:form\">\n  <container type=\"iconbox\">\n    <container img=\"ncm:general.png\" label=\"General\">\n      <container type=\"notebook\">\n        <container label=\"Name\">\n          <input xpath=\"@firstName\"/>\n          <input xpath=\"@lastName\"/>\n        </container>\n        <container label=\"Contact\">\n          <input xpath=\"@email\"/>\n        </container>\n      </container>\n    </container>\n    <container img=\"ncm:detail.png\" label=\"Details\">\n      <input xpath=\"@birthDate\"/>\n    </container>\n  </container>\n</form>","As a result, the General page of the outer form shows the Name and Contact tabs.","To nest a form within another form, insert a <container> element and set the type attribute to the form type. For the top-level form, you can set the form type in an outer container or in the <form> element.","Example","This example shows a complex form:","The top-level form is an iconbox form. This form comprises two containers labelled General and Details.","As a result, the outer form shows the General and Details pages at the top level. To access these pages, users click the icons at the left of the form.","The subform is an notebook form that is nested within the General container. The subform comprises two containers that are labelled Name and Contact.","<form _cs=\"Profile (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Profile\" name=\"profile\" namespace=\"nms\" xtkschema=\"xtk:form\">\n  <container type=\"iconbox\">\n    <container img=\"ncm:general.png\" label=\"General\">\n      <container type=\"notebook\">\n        <container label=\"Name\">\n          <input xpath=\"@firstName\"/>\n          <input xpath=\"@lastName\"/>\n        </container>\n        <container label=\"Contact\">\n          <input xpath=\"@email\"/>\n        </container>\n      </container>\n    </container>\n    <container img=\"ncm:detail.png\" label=\"Details\">\n      <input xpath=\"@birthDate\"/>\n    </container>\n  </container>\n</form>","As a result, the General page of the outer form shows the Name and Contact tabs.","Modify a factory input form","To modify a factory form, follow these steps:","Modify the factory input form:","From the menu, choose Administration > Configuration > Input forms.\nSelect an input form and modify it.","You can extend factory data schemas, but you cannot extend factory input forms. We recommend that you modify factory input forms directly without recreating them. During software upgrades, your modifications in the factory input forms are merged with the upgrades. If the automatic merge fails, you can resolve the conflicts. Read more.","For example, if you extend a factory schema with an additional field, you can add this field to the related factory form.","Validate forms","You can include validation controls in forms.","Grant read-only access to fields","To grant read-only access to a field, use the readOnly=\"true\" attribute. For example, you might want to show the primary key of a record, but with read-only access. Read more.","In this example, the primary key (iRecipientId) of the nms:recipient schema is displayed in read-only access:","<value xpath=\"@iRecipientId\" readOnly=\"true\"/>","Check mandatory fields","You can check mandatory information:","Use the required=\"true\" attribute for the required fields.\nUse the <leave> node to check these fields and show error messages.","In this example, the email address is required, and an error message is displayed if the user has not provided this information:","<input xpath=\"@email\" required=\"true\"/>\n<leave>\n  <check expr=\"@email!=''\">\n    <error>The email address is required.</error>\n  </check>\n</leave>","Read more about expression fields and form context.","Validate values","You can use JavaScript SOAP calls to validate form data from the Console. Use these calls for complex validation, for example, to check a value against a list of authorized values. Read more.","Create a validation function in a JS file.","Example:","function nms_recipient_checkValue(value)\n{\n  logInfo(\"checking value \" + value)\n  if (…)\n  {\n    logError(\"Value \" + value + \" is not valid\")\n  }\n  return 1\n}","In this example, the function is named checkValue. This function is used to check the recipient data type in the nms namespace. The value that is being checked is logged. If the value is not valid, then an error message is logged. If the value is valid, then the value 1 is returned.","You can use the returned value to modify the form.","In the form, add the <soapCall> element to the <leave> element.","In this example, a SOAP call is used to validate the @valueToCheck string:","<form name=\"recipient\" (…)>\n(…)\n  <leave>\n    <soapCall name=\"checkValue\" service=\"nms:recipient\">\n      <param exprIn=\"@valueToCheck\" type=\"string\"/>\n    </soapCall>\n  </leave>\n</form>","In this example, the checkValue method and the nms:recipient service are used:","The service is the namespace and the data type.\nThe method is the function name. The name is case-sensitive.","The call is performed synchronously.","All exceptions are displayed. If you use the <leave> element, then users cannot save the form until the entered information is validated.","This example shows how you can make service calls from within forms:","<enter>\n  <soapCall name=\"client\" service=\"c4:ybClient\">\n    <param exprIn=\"@id\" type=\"string\"/>\n    <param type=\"boolean\" xpathOut=\"/tmp/@count\"/>\n  </soapCall>\n</enter>"]},{"section":"Create an `iconbox` form","sectionId":"be63e017-5822-47c9-93a4-1ff1a48ffa62","paragraphs":["Edit forms","Overview","Marketers and operators use input forms to create, modify, and preview records. Forms show a visual representation of information.","You can create and modify input forms:","You can modify the factory input forms that are delivered by default. The factory input forms are based on the factory data schemas.\nYou can create custom input forms, based on data schemas that you define.","Forms are entities of xtk:form type. You can view the input form structure in the xtk:form schema. To view this schema, choose Administration > Configuration > Data schemas from the menu. Read more about form structure.","To access input forms, choose Administration > Configuration > Input forms from the menu:","To design forms, edit the XML content in the XML editor:","Read more.","To preview a form, click the Preview tab:","Form types","You can create different types of input forms. The form type determines how users navigate the form:","Console screen","This is the default form type. The form comprises a single page.","Content Management","Use this form type for content management. See this use case.","Wizard","This form comprises multiple floating screens that are ordered in a specific sequences. Users navigate from one screen to the next. Read more.","Iconbox","This form comprises multiple pages. To navigate the form, users select icons at the left of the form.","Notebook","This form comprises multiple pages. To navigate the form, users select tabs at the top of the form.","Vertical pane","This form shows a navigation tree.","Horizontal pane","This form shows a list of items.","Containers","In forms, you can use containers for various purposes:","Organize content within forms\nDefine access to input fields\nNest forms within other forms","Read more.","Organize content","Use containers to organize content within forms:","You can group fields into sections.\nYou can add pages to multipage forms.","To insert a container, use the <container> element. Read more.","Group fields","Use containers to group input fields into organized sections.","To insert a section into a form, use this element: <container type=\"frame\">. Optionally, to add a section title, use the label attribute.","Syntax: <container type=\"frame\" label=\"section_title\"> […] </container>","In this example, a container defines the Creation section, which comprises the Created by and Name input fields:","<form _cs=\"Coupons (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Coupons\"\n      name=\"coupon\" namespace=\"nms\" type=\"default\" xtkschema=\"xtk:form\">\n  <input xpath=\"@code\"/>\n  <input xpath=\"@type\"/>\n  <container label=\"Creation\" type=\"frame\">\n    <input xpath=\"createdBy\"/>\n    <input xpath=\"createdBy/@name\"/>\n  </container>\n</form>","Add pages to multipage forms","For multipage forms, use a container to create a form page.","This example shows containers for the General and Details pages of a form:","<container img=\"ncm:book.png\" label=\"General\">\n[…]\n</container>\n<container img=\"ncm:detail.png\" label=\"Details\">\n[…]\n</container>","Define access to fields","Use containers to define what is visible and to define access to fields. You can turn on or off groups of fields.","Nest forms","Use containers to nest forms within other forms. Read more.","References to images","To find images, choose Administration > Configuration > Images from the menu.","To associate an image with an element in the form, for example, an icon, you can add a reference to an image. Use the img attribute, for example, in the <container> element.","Syntax: img=\"namespace:filename.extension\"","This example shows references to the book.png and detail.png images from the ncm namespace:","<container img=\"ncm:book.png\" label=\"General\">\n[…]\n</container>\n<container img=\"ncm:detail.png\" label=\"Details\">\n[…]\n</container>","These images are used for icons that users click to navigate a multipage form:","Create a simple form","To create a form, follow these steps:","From the menu, choose Administration > Configuration > Input forms.","Click the New button at the top right of the list.","","Specify the form properties:","Specify the form name and the namespace.","The form name and the namespace can match the related data schema.  This example shows a form for the cus:order data schema:","<form entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Order\" name=\"order\" namespace=\"cus\" type=\"iconbox\" xtkschema=\"xtk:form\">\n  […]\n</form>","Alternatively, you can explicitly specify the data schema in the entity-schema attribute.","<form entity-schema=\"cus:stockLine\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Stock order\" name=\"stockOrder\" namespace=\"cus\" xtkschema=\"xtk:form\">\n  […]\n</form>","Specify the label to be displayed on the form.","Optionally, specify the form type. If you do not specify a form type, the console screen type is used by default.","","If you are designing a multipage form, you can omit the form type in the <form> element and specify the type in a container.","Click Save.","Insert the form elements.","For example, to insert an input field, use the <input> element. Set the xpath attribute to the field reference as an XPath expression. Read more.","This example shows input fields based on the nms:recipient schema.","<input xpath=\"@firstName\"/>\n<input xpath=\"@lastName\"/>","If the form is based on a specific schema type, you can look up the fields for this schema:","Click Insert > Document fields.","Select the field and click OK.","Optionally, specify the field editor.","A default field editor is associated with each data type:","For a date-type field, the form shows an input calendar.\nFor an enumeration-type field, the form shows a selection list.","You can use these field editor types:","Field editor Form attribute\nRadio button type=\"radiobutton\"\nCheckbox type=\"checkbox\"\nEdit tree type=\"tree\"","Read more about memory list controls.","Optionally, define access to the fields:","Element Attribute Description\n<input> read-only=\"true\" Provides read-only access to a field\n<container> type=\"visibleGroup\" visibleIf=\"edit-expr\" Conditionally displays a group of fields\n<container> type=\"enabledGroup\" enabledIf=\"edit-expr\" Conditionally enables a group of fields","Example:","<container type=\"enabledGroup\" enabledIf=\"@gender=1\">\n  […]\n</container>\n<container type=\"enabledGroup\" enabledIf=\"@gender=2\">\n  […]\n</container>","Optionally, use containers to group fields into sections.","<container type=\"frame\" label=\"Name\">\n   <input xpath=\"@firstName\"/>\n   <input xpath=\"@lastName\"/>\n</container>\n<container type=\"frame\" label=\"Contact details\">\n   <input xpath=\"@email\"/>\n   <input xpath=\"@phone\"/>\n</container>","Create a multipage form","You can create multipage forms. You can also nest forms within other forms.","Create an iconbox form","Use the iconbox form type to show icons at the left of the form, which take users to different pages in the form.","To change the type of an existing form to iconbox, follow these steps:","Change the type attribute of the <form> element to iconbox:","<form […] type=\"iconbox\">","Set a container for each form page:","Add a <container> element as a child of the <form> element.","To define a label and an image for the icon, use the label and img attributes.","<form entitySchema=\"xtk:form\" name=\"Service provider\" namespace=\"nms\" type=\"iconbox\" xtkschema=\"xtk:form\">\n    <container img=\"xtk:properties.png\" label=\"General\">\n        <input xpath=\"@label\"/>\n        <input xpath=\"@name\"/>\n        […]\n    </container>\n    <container img=\"nms:msgfolder.png\" label=\"Details\">\n        <input xpath=\"@address\"/>\n        […]\n    </container>\n    <container img=\"nms:supplier.png\" label=\"Services\">\n        […]\n    </container>\n</form>","Alternatively, remove the type=\"frame\" attribute from the existing <container> elements."]},{"section":"Create a notebook form","sectionId":"aa478abb-6bba-4973-9a51-08787c5e92d6","paragraphs":[]},{"section":"Nest forms","sectionId":"ffb0f92a-534b-4bf0-b8f6-3b0113b99227","paragraphs":["Use containers to nest forms within other forms. Read more.","References to images","To find images, choose Administration > Configuration > Images from the menu.","To associate an image with an element in the form, for example, an icon, you can add a reference to an image. Use the img attribute, for example, in the <container> element.","Syntax: img=\"namespace:filename.extension\"","This example shows references to the book.png and detail.png images from the ncm namespace:","<container img=\"ncm:book.png\" label=\"General\">\n[…]\n</container>\n<container img=\"ncm:detail.png\" label=\"Details\">\n[…]\n</container>","These images are used for icons that users click to navigate a multipage form:","Create a simple form","To create a form, follow these steps:","From the menu, choose Administration > Configuration > Input forms.","Click the New button at the top right of the list.","","Specify the form properties:","Specify the form name and the namespace.","The form name and the namespace can match the related data schema.  This example shows a form for the cus:order data schema:","<form entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Order\" name=\"order\" namespace=\"cus\" type=\"iconbox\" xtkschema=\"xtk:form\">\n  […]\n</form>","Alternatively, you can explicitly specify the data schema in the entity-schema attribute.","<form entity-schema=\"cus:stockLine\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Stock order\" name=\"stockOrder\" namespace=\"cus\" xtkschema=\"xtk:form\">\n  […]\n</form>","Specify the label to be displayed on the form.","Optionally, specify the form type. If you do not specify a form type, the console screen type is used by default.","","If you are designing a multipage form, you can omit the form type in the <form> element and specify the type in a container.","Click Save.","Insert the form elements.","For example, to insert an input field, use the <input> element. Set the xpath attribute to the field reference as an XPath expression. Read more.","This example shows input fields based on the nms:recipient schema.","<input xpath=\"@firstName\"/>\n<input xpath=\"@lastName\"/>","If the form is based on a specific schema type, you can look up the fields for this schema:","Click Insert > Document fields.","Select the field and click OK.","Optionally, specify the field editor.","A default field editor is associated with each data type:","For a date-type field, the form shows an input calendar.\nFor an enumeration-type field, the form shows a selection list.","You can use these field editor types:","Field editor Form attribute\nRadio button type=\"radiobutton\"\nCheckbox type=\"checkbox\"\nEdit tree type=\"tree\"","Read more about memory list controls.","Optionally, define access to the fields:","Element Attribute Description\n<input> read-only=\"true\" Provides read-only access to a field\n<container> type=\"visibleGroup\" visibleIf=\"edit-expr\" Conditionally displays a group of fields\n<container> type=\"enabledGroup\" enabledIf=\"edit-expr\" Conditionally enables a group of fields","Example:","<container type=\"enabledGroup\" enabledIf=\"@gender=1\">\n  […]\n</container>\n<container type=\"enabledGroup\" enabledIf=\"@gender=2\">\n  […]\n</container>","Optionally, use containers to group fields into sections.","<container type=\"frame\" label=\"Name\">\n   <input xpath=\"@firstName\"/>\n   <input xpath=\"@lastName\"/>\n</container>\n<container type=\"frame\" label=\"Contact details\">\n   <input xpath=\"@email\"/>\n   <input xpath=\"@phone\"/>\n</container>","Create a multipage form","You can create multipage forms. You can also nest forms within other forms.","Create an iconbox form","Use the iconbox form type to show icons at the left of the form, which take users to different pages in the form.","To change the type of an existing form to iconbox, follow these steps:","Change the type attribute of the <form> element to iconbox:","<form […] type=\"iconbox\">","Set a container for each form page:","Add a <container> element as a child of the <form> element.","To define a label and an image for the icon, use the label and img attributes.","<form entitySchema=\"xtk:form\" name=\"Service provider\" namespace=\"nms\" type=\"iconbox\" xtkschema=\"xtk:form\">\n    <container img=\"xtk:properties.png\" label=\"General\">\n        <input xpath=\"@label\"/>\n        <input xpath=\"@name\"/>\n        […]\n    </container>\n    <container img=\"nms:msgfolder.png\" label=\"Details\">\n        <input xpath=\"@address\"/>\n        […]\n    </container>\n    <container img=\"nms:supplier.png\" label=\"Services\">\n        […]\n    </container>\n</form>","Alternatively, remove the type=\"frame\" attribute from the existing <container> elements.","Create a notebook form","Use the notebook form type to show tabs at the top of the form, which take users to different pages.","To change the type of an existing form to notebook, follow these steps:","Change the type attribute of the <form> element to notebook:","<form […] type=\"notebook\">","Add a container for each form page:","Add a <container> element as a child of the <form> element.\nTo define the label and the image for the icon, use the label and img attributes.","<form entitySchema=\"xtk:form\" name=\"Service provider\" namespace=\"nms\" type=\"notebook\" xtkschema=\"xtk:form\">\n      <container label=\"General\">\n          <input xpath=\"@label\"/>\n          <input xpath=\"@name\"/>\n          […]\n      </container>\n      <container label=\"Details\">\n          <input xpath=\"@address\"/>\n          […]\n      </container>\n      <container label=\"Services\">\n          […]\n      </container>\n  </form>","Alternatively, remove the type=\"frame\" attribute from the existing <container> elements.","Nest forms","You can nest forms within other forms. For example, you can nest notebook forms within iconbox forms.","The level of nesting controls navigation. Users can drill down to subforms.","To nest a form within another form, insert a <container> element and set the type attribute to the form type. For the top-level form, you can set the form type in an outer container or in the <form> element."]},{"section":"Example","sectionId":"14fa9561-2176-491c-b1a4-fec21f7a3183","paragraphs":[]},{"section":"Example","sectionId":"82a1239e-54ef-49e1-a906-95ededad7f52","paragraphs":["This example shows a complex form:","The top-level form is an iconbox form. This form comprises two containers labelled General and Details.","As a result, the outer form shows the General and Details pages at the top level. To access these pages, users click the icons at the left of the form.","The subform is an notebook form that is nested within the General container. The subform comprises two containers that are labelled Name and Contact.","<form _cs=\"Profile (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Profile\" name=\"profile\" namespace=\"nms\" xtkschema=\"xtk:form\">\n  <container type=\"iconbox\">\n    <container img=\"ncm:general.png\" label=\"General\">\n      <container type=\"notebook\">\n        <container label=\"Name\">\n          <input xpath=\"@firstName\"/>\n          <input xpath=\"@lastName\"/>\n        </container>\n        <container label=\"Contact\">\n          <input xpath=\"@email\"/>\n        </container>\n      </container>\n    </container>\n    <container img=\"ncm:detail.png\" label=\"Details\">\n      <input xpath=\"@birthDate\"/>\n    </container>\n  </container>\n</form>","As a result, the General page of the outer form shows the Name and Contact tabs.","To nest a form within another form, insert a <container> element and set the type attribute to the form type. For the top-level form, you can set the form type in an outer container or in the <form> element.","Example","This example shows a complex form:","The top-level form is an iconbox form. This form comprises two containers labelled General and Details.","As a result, the outer form shows the General and Details pages at the top level. To access these pages, users click the icons at the left of the form.","The subform is an notebook form that is nested within the General container. The subform comprises two containers that are labelled Name and Contact.","<form _cs=\"Profile (nms)\" entitySchema=\"xtk:form\" img=\"xtk:form.png\" label=\"Profile\" name=\"profile\" namespace=\"nms\" xtkschema=\"xtk:form\">\n  <container type=\"iconbox\">\n    <container img=\"ncm:general.png\" label=\"General\">\n      <container type=\"notebook\">\n        <container label=\"Name\">\n          <input xpath=\"@firstName\"/>\n          <input xpath=\"@lastName\"/>\n        </container>\n        <container label=\"Contact\">\n          <input xpath=\"@email\"/>\n        </container>\n      </container>\n    </container>\n    <container img=\"ncm:detail.png\" label=\"Details\">\n      <input xpath=\"@birthDate\"/>\n    </container>\n  </container>\n</form>","As a result, the General page of the outer form shows the Name and Contact tabs."]},{"section":"Modify a factory input form","sectionId":"c5983ca1-fb0d-40b0-ad37-22a27d893504","paragraphs":["To modify a factory form, follow these steps:","Modify the factory input form:","From the menu, choose Administration > Configuration > Input forms.\nSelect an input form and modify it.","You can extend factory data schemas, but you cannot extend factory input forms. We recommend that you modify factory input forms directly without recreating them. During software upgrades, your modifications in the factory input forms are merged with the upgrades. If the automatic merge fails, you can resolve the conflicts. Read more.","For example, if you extend a factory schema with an additional field, you can add this field to the related factory form."]},{"section":"Validate forms","sectionId":"5798482c-2bd7-49af-9e2f-2143eaae739a","paragraphs":["You can include validation controls in forms."]},{"section":"Grant read-only access to fields","sectionId":"41ab28e3-9f7b-4309-bd45-ab228ccd59fc","paragraphs":["To grant read-only access to a field, use the readOnly=\"true\" attribute. For example, you might want to show the primary key of a record, but with read-only access. Read more.","In this example, the primary key (iRecipientId) of the nms:recipient schema is displayed in read-only access:","<value xpath=\"@iRecipientId\" readOnly=\"true\"/>"]},{"section":"Check mandatory fields","sectionId":"34fba4e7-4d96-4e5a-b9a2-db8c5457458a","paragraphs":["You can check mandatory information:","Use the required=\"true\" attribute for the required fields.\nUse the <leave> node to check these fields and show error messages.","In this example, the email address is required, and an error message is displayed if the user has not provided this information:","<input xpath=\"@email\" required=\"true\"/>\n<leave>\n  <check expr=\"@email!=''\">\n    <error>The email address is required.</error>\n  </check>\n</leave>","Read more about expression fields and form context."]},{"section":"Validate values","sectionId":"c2fd3279-0107-4a25-a04c-b0ba29ecfe2b","paragraphs":["You can use JavaScript SOAP calls to validate form data from the Console. Use these calls for complex validation, for example, to check a value against a list of authorized values. Read more.","Create a validation function in a JS file.","Example:","function nms_recipient_checkValue(value)\n{\n  logInfo(\"checking value \" + value)\n  if (…)\n  {\n    logError(\"Value \" + value + \" is not valid\")\n  }\n  return 1\n}","In this example, the function is named checkValue. This function is used to check the recipient data type in the nms namespace. The value that is being checked is logged. If the value is not valid, then an error message is logged. If the value is valid, then the value 1 is returned.","You can use the returned value to modify the form.","In the form, add the <soapCall> element to the <leave> element.","In this example, a SOAP call is used to validate the @valueToCheck string:","<form name=\"recipient\" (…)>\n(…)\n  <leave>\n    <soapCall name=\"checkValue\" service=\"nms:recipient\">\n      <param exprIn=\"@valueToCheck\" type=\"string\"/>\n    </soapCall>\n  </leave>\n</form>","In this example, the checkValue method and the nms:recipient service are used:","The service is the namespace and the data type.\nThe method is the function name. The name is case-sensitive.","The call is performed synchronously.","All exceptions are displayed. If you use the <leave> element, then users cannot save the form until the entered information is validated.","This example shows how you can make service calls from within forms:","<enter>\n  <soapCall name=\"client\" service=\"c4:ybClient\">\n    <param exprIn=\"@id\" type=\"string\"/>\n    <param type=\"boolean\" xpathOut=\"/tmp/@count\"/>\n  </soapCall>\n</enter>","In this example, the input is an ID, which is a primary key. When users fill the form for this ID, a SOAP call is made with this ID as the input parameter. The output is a boolean that is written to this field: /tmp/@count. You can use this boolean inside the form. Read more about form context."]}]}