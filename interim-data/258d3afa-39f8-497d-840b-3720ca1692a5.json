{"guid":"258d3afa-39f8-497d-840b-3720ca1692a5","title":"Integrate Campaign SDK","path":"help\\delivery\\using\\integrating-campaign-sdk-into-the-mobile-application.md","fullText":"---\nproduct: campaign\ntitle: Integrate Campaign SDK\ndescription: Learn how to integrate Campaign SDK to your mobile app\nfeature: Mobile SDK Integration, Push\nrole: User, Developer\nhide: yes\nhidefromtoc: yes\nexl-id: a5f6b82d-5561-4e56-b2ed-7fd6fd8c2b55\n---\n# Integrate Campaign SDK with your app {#integrating-campaign-sdk-into-the-mobile-application}\n\n>[!CAUTION]\n>\n>Adobe strongly recommends to use the Adobe Experience Platform Mobile SDK by configuring the Adobe Campaign extension in the Data Collection UI. The Adobe Experience Platform Mobile SDK helps power Adobe's Experience Cloud solutions and services in your mobile apps. SDKs configuration is managed through the Data Collection UI for flexible configuration and extensible, rules-based integrations. [Learn more in Adobe Developer documentation](https://developer.adobe.com/client-sdks/documentation/adobe-campaign-classic){target=\"_blank\"}.\n\nTo get Campaign SDK (previously known as Neolane SDK), contact [Adobe Customer Care](https://helpx.adobe.com/enterprise/admin-guide.html/enterprise/using/support-for-experience-cloud.ug.html){target=\"_blank\"}.\n\nTo learn more on the different Android and iOS versions supported, refer to the [Compatibility matrix](../../rn/using/compatibility-matrix.md#MobileSDK).\n\nYou can find below the integration steps for Campaign SDK.\n\n+++**Loading Campaign SDK**\n\n* **In Android**: the **neolane_sdk-release.aar** file must be linked to the project.\n\n  The following permission grants access to the Adobe Campaign server:\n\n  ```\n  Neolane.getInstance().setIntegrationKey(\"your Adobe mobile app integration key\");\n  Neolane.getInstance().setMarketingHost(\"https://yourMarketingHost:yourMarketingPort/\");\n  Neolane.getInstance().setTrackingHost(\"https://yourTrackingHost:yourTrackingPort/\");\n  ```\n\n  The following permission allows you to recover a mobile's unique ID:\n\n  ```\n  <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /> \n  ```\n\n  From version 1.0.24 of the SDK, this permission is only used for versions older than Android 6.0.\n\n  From version 1.0.26 of the SDK, this permission is no longer used.\n\n* **In iOS**: the **libNeolaneSDK.a** and **Neolane_SDK.h** files must be linked to the project. From version 1.0.24 of the SDK, the option **ENABLE_BITCODE** is activated.\n\n  >[!NOTE]\n  >\n  >For version 1.0.25 of the SDK, the four architectures are available in the **Neolane_SDK.h** file.\n\n+++\n\n+++**Declaring integration settings**\n\nTo integrate Campaign SDK into the mobile application, the functional administrator must provide the following information to the developer:\n\n* **An integration key**: to enable the Adobe Campaign platform to identify the mobile application.\n\n  >[!NOTE]\n  >\n  >This integration key is entered in the Adobe Campaign console, in the **[!UICONTROL Information]** tab of service dedicated to the mobile application. Refer to [Configuring a mobile application in Adobe Campaign](configuring-the-mobile-application.md).\n\n* **A tracking URL**: that matches the address of the Adobe Campaign tracking server.\n* **A marketing URL**: to enable the collection of subscriptions.\n\n* **In Android**:\n\n  ```\n  Neolane.getInstance().setIntegrationKey(\"your Adobe mobile app integration key\");\n  Neolane.getInstance().setMarketingHost(\"https://yourMarketingHost:yourMarketingPort/\");\n  Neolane.getInstance().setTrackingHost(\"https://yourTrackingHost:yourTrackingPort/\"); \n  ```\n\n* **In iOS**:\n\n  ```\n  Neolane_SDK *nl = [Neolane_SDK getInstance];\n  [nl setMarketingHost:strMktHost];\n  [nl setTrackingHost:strTckHost];\n  [nl setIntegrationKey:strIntegrationKey];\n  ```\n\n+++\n\n+++**Registration function**\n\nThe registration function enables you to:\n\n* send the notification ID or push ID (deviceToken for iOS and registrationID for Android) to Adobe Campaign.\n* recover the reconciliation key or userKey (email or account number, for instance)\n\n* **In Android**:\n\n  ```\n  void registerInNeolane(String registrationId, String userKey, Context context)\n  {\n   try{\n    Neolane.getInstance().registerDevice(registrationToken, userKey, null, context);\n   } catch (NeolaneException e){\n    //...\n   } catch (IOException e){\n    //...\n   }\n  }\n  ```\n\n  If you use FCM (Firebase Cloud Messaging), we advise you use the **registerDevice** function when calling the **onTokenRefresh** function to notify Adobe Campaign of the change in the user's mobile device token.\n\n  ```\n  public class NeoTripFirebaseInstanceIDService extends FirebaseInstanceIdService {\n    @Override\n    public void onTokenRefresh() {\n      String registrationToken = FirebaseInstanceId.getInstance().getToken();\n      NeolaneAsyncRunner neolaneAs = new NeolaneAsyncRunner(Neolane.getInstance());\n      ...\n      ...\n      // Neolane Registration\n      neolaneAs.registerDevice(registrationToken, userKey, additionnalParam, this, new NeolaneAsyncRunner.RequestListener() {\n      public void onComplete(String e, Object state) { ... }\n      public void onNeolaneException(NeolaneException e, Object state) { ... }\n      public void onIOException(IOException e, Object state) { ... }\n      });\n      ...\n      ...\n    }\n  }\n  ```\n\n* **In iOS**:\n\n  ```\n  // Callback called on successful registration to the APNs\n  - (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n  {\n      // Pass the token to Adobe Campaign\n      Neolane_SDK *nl = [Neolane_SDK getInstance];\n      [nl registerDevice:tokenString:self.userKey:dic];\n  }\n  ```\n\n+++\n\n+++**Tracking function**\n\n* **In Android**:\n\n  Tracking functions allow you to track notification activations (opens) and notification displays (screenshot).\n\n  To track the notification display (done by calling the **notifyReceive** function of the SDK), follow the implementation below. Note that if you use FCM (Firebase Cloud Messaging), we advise you to use the **notifyReceive** function when the **onMessageReceived** function is called by the Android system.\n\n  ```\n  package com.android.YourApplication;\n\n  import android.content.Context;\n  import android.content.SharedPreferences;\n  import android.os.Bundle;\n  import android.util.Log;\n\n  import com.google.firebase.messaging.FirebaseMessagingService;\n  import com.google.firebase.messaging.RemoteMessage;\n\n  import java.util.Iterator;\n  import java.util.Map;\n  import java.util.Map.Entry;\n\n  public class YourApplicationFirebaseMessagingService extends FirebaseMessagingService {\n    private static final String TAG = \"MyFirebaseMsgService\";\n\n    @Override\n    public void onMessageReceived(RemoteMessage message) {\n      Log.d(TAG, \"Receive message from: \" + message.getFrom());\n      Map<String,String> payloadData = message.getData();\n      final Bundle extras = new Bundle();\n      final Iterator<Entry<String, String>> iter = payloadData.entrySet().iterator();\n      while(iter.hasNext())\n      {\n        final Entry<String, String>  entry =iter.next();\n        extras.putString(entry.getKey(), entry.getValue());\n      }\n\n      SharedPreferences settings = this.getSharedPreferences(YourApplicationActivity.APPLICATION_PREF_NAME, Context.MODE_PRIVATE);\n      String mesg = payloadData.get(\"_msg\");\n      String title = payloadData.get(\"title\");\n      String url = payloadData.get(\"url\");\n      String messageId = payloadData.get(\"_mId\");\n      String deliveryId = payloadData.get(\"_dId\");\n      YourApplicationActivity.handleNotification(this, mesg, title, url, messageId, deliveryId, extras);\n    }\n  }\n  ```\n\n  ```\n  public static void handleNotification(Context context, String message, String title, String url, String messageId, String deliveryId, Bundle extras){\n      if( message == null ) message = \"No Content\";\n      if( title == null )   title = \"No title\";\n      if( url == null )     url = \"https://www.tripadvisor.fr\";\n      int iconId = R.drawable.notif_neotrip;\n\n    // notify Neolane that a notification just arrived\n    SharedPreferences settings = context.getSharedPreferences(NeoTripActivity.APPLICATION_PREF_NAME, Context.MODE_PRIVATE);\n    Neolane.getInstance().setIntegrationKey(settings.getString(NeoTripActivity.APPUUID_NAME, NeoTripActivity.DFT_APPUUID));\n    Neolane.getInstance().setMarketingHost(settings.getString(NeoTripActivity.SOAPRT_NAME, NeoTripActivity.DFT_SOAPRT));\n    Neolane.getInstance().setTrackingHost(settings.getString(NeoTripActivity.TRACKRT_NAME, NeoTripActivity.DFT_TRACKRT));\n \n    NeolaneAsyncRunner nas = new NeolaneAsyncRunner(Neolane.getInstance());\n    nas.notifyReceive(Integer.valueOf(messageId), deliveryId, new NeolaneAsyncRunner.RequestListener() {\n      public void onNeolaneException(NeolaneException arg0, Object arg1) {}\n      public void onIOException(IOException arg0, Object arg1) {}\n      public void onComplete(String arg0, Object arg1){}\n    });\n    if (yourApplication.isActivityVisible())\n      {\n        Log.i(\"INFO\", \"The application has the focus\" );\n        ...\n      }\n      else\n      {\n        // notification creation :\n        NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n        Notification notification;\n\n        // Activity to start :\n        Intent notifIntent = new Intent(context.getApplicationContext(), NotificationActivity.class);\n        notifIntent.putExtra(\"notificationText\", message);\n        notifIntent.putExtra(NotificationActivity.NOTIFICATION_URL_KEYNAME, url);\n        notifIntent.putExtra(\"_dId\", deliveryId);\n        notifIntent.putExtra(\"_mId\", messageId);\n        notifIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        PendingIntent contentIntent = PendingIntent.getActivity(context, 1, notifIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n\n        notification = new Notification.Builder(context)\n                .setContentTitle(title)\n                .setContentText(message)\n                .setSmallIcon(iconId)\n                .setContentIntent(contentIntent)\n                .build();\n\n        // launch the notification :\n        notification.flags |= Notification.FLAG_AUTO_CANCEL;\n        notificationManager.notify(Integer.valueOf(messageId), notification);\n      }\n  }\n  ```\n\n  Here is an implementation example for tracking a notification open (executed by calling the **notifyOpening** function of the SDK). The **NotificationActivity** class corresponds to the one used to create the **notifIntent** object in the previous example.\n\n  ```\n  public class NotificationActivity extends Activity {\n  public void onCreate(Bundle savedBundle) {\n    [...]\n    Bundle extra = getIntent().getExtras();\n    if (extra != null) {\n      // reinit the acc sdk\n      SharedPreferences settings = getSharedPreferences(NeoTripActivity.APPLICATION_PREF_NAME, Context.MODE_PRIVATE);\n      Neolane.getInstance().setIntegrationKey(settings.getString(NeoTripActivity.APPUUID_NAME, NeoTripActivity.DFT_APPUUID));\n      Neolane.getInstance().setMarketingHost(settings.getString(NeoTripActivity.SOAPRT_NAME, NeoTripActivity.DFT_SOAPRT));               \n      Neolane.getInstance().setTrackingHost(settings.getString(NeoTripActivity.TRACKRT_NAME, NeoTripActivity.DFT_TRACKRT));\n \n      // Get the messageId and the deliveryId to do the tracking\n      String deliveryId = extra.getString(\"_dId\");\n      String messageId = extra.getString(\"_mId\");\n      if (deliveryId != null && messageId != null) {\n        try {\n          Neolane.getInstance().notifyOpening(Integer.valueOf(messageId), Integer.valueOf(deliveryId));\n        } catch (NeolaneException e) {\n          // ...\n        } catch (IOException e) {\n          // ...\n        }\n      }\n    }\n   }\n  }\n\n  ```\n\n* **In iOS**:\n\n  The tracking function allows you to track when notifications are activated (opens).\n\n  ```\n  (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions\n  fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n  {\n  if( launchOptions ) { // Retrieve notification parameters here ... // Track application opening Neolane_SDK\n  *nl = [Neolane_SDK getInstance]; [nl track:launchOptions:NL_TRACK_CLICK]; } \n  ...  \n  completionHandler(UIBackgroundFetchResultNoData);\n  }\n  ```\n\n  >[!NOTE]\n  >\n  >From version 7.0, once the **`application:didReceiveRemoteNotification:fetchCompletionHandler`** function is implemented, the operating system only calls this function. The **`application:didReceiveRemoteNotification`** function is therefore not called.\n\n+++\n\n+++**Silent notification tracking**\n\niOS lets you send silent notifications, a notification or data which will be directly sent to a mobile application without displaying it. Adobe Campaign allows you to track them.\n\nTo track your silent notification, follow the example below:\n\n```\n// AppDelegate.m\n...\n...\n#import \"AppDelegate.h\"\n#import \"Neolane_SDK.h\"\n...\n...\n// Callback called when the application is already launched (whether the application is running foreground or background)\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n NSLog(@\"IN didReceiveRemoteNotification:fetchCompletionHandler\");\n if (launchOptions) NSLog(@\"IN launchOptions: %@\", [launchOptions description]);\n NSLog(@\"Application state: %ld\", (long)application.applicationState);\n\n // Silent Notification (specific case, can use NL_TRACK_RECEIVE as the user doesn't have click/open the notification)\n if ([launchOptions[@\"aps\"][@\"content-available\"] intValue] == 1 )\n       {\n  NSLog(@\"Silent Push Notification\");\n  ...  \n  ...\n  //Call receive tracking\n        Neolane_SDK *nl = [Neolane_SDK getInstance];\n  [nl track:launchOptions:NL_TRACK_RECEIVE];\n\n  completionHandler(UIBackgroundFetchResultNoData); //Do not show notification\n  return;\n }  \n ...\n ...\n        completionHandler(UIBackgroundFetchResultNoData);\n}\n```\n\n+++\n\n+++**RegisterDeviceStatus delegate**\n\n>[!NOTE]\n>\n>Please note that this is exclusive to iOS.\n\nIn iOS, the delegate protocol allows you to get the result of the **registerDevice** call and can be used to know if an error occurred during registration.\n\nThe **registerDeviceStatus** prototype is:\n\n```\n- (void) registerDeviceStatus: (ACCRegisterDeviceStatus) status:(NSString *) errorReason;\n```\n\n**Status** allows you to know if a registration succeeded or if an error occurred.\n\n**ErrorReason** provides you with more information on the errors that occurred. For more information on available errors and their descriptions, refer to the table below.\n\n<table> \n <thead>\n  <tr>\n   <th> Status<br /> </th>\n   <th> Description<br /> </th>\n   <th> ErrorReason<br /> </th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td> ACCRegisterDeviceStatusSuccess <br /> </td>\n   <td> Registration Succeeded<br /> </td>\n   <td> EMPTY<br /> </td>\n  </tr>\n  <tr> \n   <td> ACCRegisterDeviceStatusFailureMarketingServerHostnameEmpty <br /> </td>\n   <td> The ACC marketing server hostname is empty or not set.<br /> </td>\n   <td> EMPTY<br /> </td>\n  </tr>\n  <tr> \n   <td> ACCRegisterDeviceStatusFailureIntegrationKeyEmpty <br /> </td>\n   <td> The integration key is empty or not set.<br /> </td>\n   <td> EMPTY<br /> </td>\n  </tr>\n  <tr> \n   <td> ACCRegisterDeviceStatusFailureConnectionIssue<br /> </td>\n   <td> Connection issue with ACC<br /> </td>\n   <td> More information (in OS current language)<br /> </td>\n  </tr>\n  <tr> \n   <td> ACCRegisterDeviceStatusFailureUnknownUUID<br /> </td>\n   <td> The provided UUID (integration key) is unknown.<br /> </td>\n   <td> EMPTY<br /> </td>\n  </tr>\n  <tr> \n   <td> ACCRegisterDeviceStatusFailureUnexpectedError<br /> </td>\n   <td> Unexpected error returned to ACC server.<br /> </td>\n   <td> The error message returned to ACC.<br /> </td>\n  </tr>\n </tbody>\n</table>\n\n**Neolane_SDKDelegate** protocol and **registerDeviceStatus** delegate definition is as follows:\n\n```\n//  Neolane_SDK.h\n//  Neolane SDK\n..\n.. \n// Register Device Status Enum\ntypedef NS_ENUM(NSUInteger, ACCRegisterDeviceStatus) {\n ACCRegisterDeviceStatusSuccess,                               // Resistration Succeed\n ACCRegisterDeviceStatusFailureMarketingServerHostnameEmpty,   // The ACC marketing server hostname is Empty or not set\n ACCRegisterDeviceStatusFailureIntegrationKeyEmpty,            // The integration key is empty or not set\n ACCRegisterDeviceStatusFailureConnectionIssue,                // Connection issue with ACC, more information in errorReason\n ACCRegisterDeviceStatusFailureUnknownUUID,                    // The provided UUID (integration key) is unknown\n ACCRegisterDeviceStatusFailureUnexpectedError                 // Unexpected error returned by ACC server, more information in errorReason\n};\n// define the protocol for the registerDeviceStatus delegate\n@protocol Neolane_SDKDelegate <NSObject>\n@optional\n- (void) registerDeviceStatus: (ACCRegisterDeviceStatus) status :(NSString *) errorReason;\n@end\n@interface Neolane_SDK: NSObject {\n} \n...\n...\n// registerDeviceStatus delegate\n@property (nonatomic, weak) id <Neolane_SDKDelegate> delegate;\n...\n...\n@end\n```\n\nTo implement **registerDeviceStatus** delegate, follow these steps:\n\n1. Implement the **setDelegate** during the SDK initialization.\n\n   ```\n   // AppDelegate.m\n   ...\n   ... \n   - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n   {\n   ...\n   ...\n    // Get the stored settings\n\n    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n    NSString *strMktHost = [defaults objectForKey:@\"mktHost\"];\n    NSString *strTckHost = [defaults objectForKey:@\"tckHost\"];\n    NSString *strIntegrationKey = [defaults objectForKey:@\"integrationKey\"];\n    userKey = [defaults objectForKey:@\"userKey\"];\n\n    // Configure Neolane SDK on first launch\n    Neolane_SDK *nl = [Neolane_SDK getInstance];\n    [nl setMarketingHost:strMktHost];\n    [nl setTrackingHost:strTckHost];\n    [nl setIntegrationKey:strIntegrationKey];\n    [nl setDelegate:self];    // HERE\n   ...\n   ...\n   }\n   ```\n\n1. Add the protocol in the **@interface** of your class.\n\n   ```\n   //  AppDelegate.h\n\n   #import <UIKit/UIKit.h>\n   #import <CoreLocation/CoreLocation.h>\n   #import \"Neolane_SDK.h\"\n\n   @class LandingPageViewController;\n\n   @interface AppDelegate : UIResponder <UIApplicationDelegate, CLLocationManagerDelegate, Neolane_SDKDelegate> {\n       CLLocationManager *locationManager;\n       NSString *userKey;\n       NSString *mktServerUrl;\n       NSString *tckServerUrl;\n       NSString *homeURL;\n       NSString *strLandingPageUrl;\n       NSTimer *timer;\n   }\n   ```\n\n1. Implement the delegate in the **AppDelegate**.\n\n   ```\n   //  AppDelegate.m\n\n   #import \"AppDelegate.h\"\n   #import \"Neolane_SDK.h\"\n   #import \"LandingPageViewController.h\"\n   #import \"RootViewController.h\"\n   ...\n   ...\n   - (void) registerDeviceStatus: (ACCRegisterDeviceStatus) status :(NSString *) errorReason\n   {\n       NSLog(@\"registerStatus: %lu\",status);\n\n       if ( errorReason != nil )\n           NSLog(@\"errorReason: %@\",errorReason);\n\n       if( status == ACCRegisterDeviceStatusSuccess )\n       {\n           // Registration successful\n           ...\n           ...\n       }\n       else { // An error occurred\n           NSString *message;\n           switch ( status ){\n               case ACCRegisterDeviceStatusFailureUnknownUUID:\n                   message = @\"Unkown IntegrationKey (UUID)\";\n                   break;\n               case ACCRegisterDeviceStatusFailureMarketingServerHostnameEmpty:\n                   message = @\"Marketing URL not set or Empty\";\n                   break;\n               case ACCRegisterDeviceStatusFailureIntegrationKeyEmpty:\n                   message = @\"Integration Key not set or empty\";\n                   break;\n               case ACCRegisterDeviceStatusFailureConnectionIssue:\n                   message = [NSString stringWithFormat:@\"%@ %@\",@\"Connection issue:\",errorReason];\n                   break;\n               case ACCRegisterDeviceStatusFailureUnexpectedError:\n               default:\n                   message = [NSString stringWithFormat:@\"%@ %@\",@\"Unexpected Error\",errorReason];\n                   break;\n           }\n    ...\n    ...\n       }\n   }\n   @end\n   ```\n\n+++\n\n+++**Variables**\n\nThe variables let you define mobile application behavior after receiving a notification. These variables must be defined in the mobile application code and in the Adobe Campaign console, in the **[!UICONTROL Variables]** tab in the dedicated mobile application (see [Configuring a mobile application in Adobe Campaign](configuring-the-mobile-application.md)). Here is an example of a code that allows a mobile application to collect any added variables in a notification. In our example, we are using the \"VAR\" variable.\n\n* **In Android**:\n\n  ```\n  public void onReceive(Context context, Intent intent) {\n       ...\n      String event = intent.getStringExtra(\"VAR\");\n       ...\n  }\n  ```\n\n* **In iOS**:\n\n  ```\n  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n  {\n      ....\n      if( launchOptions )\n      {\n          // When application is not already launched, the notification data if any are stored in the key 'UIApplicationLaunchOptionsRemoteNotificationKey'\n          NSDictionary *localLaunchOptions = [launchOptions objectForKey:@\"UIApplicationLaunchOptionsRemoteNotificationKey\"];\n          if( localLaunchOptions )\n          {\n           ...\n           [localLaunchOptions objectForKey:@\"VAR\"];\n          ...\n          }\n     }\n  }\n\n  // Callback called when the application is already launched (whether the application is running foreground or background)\n  - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions\n  {\n      if( launchOptions )\n      {\n       ...\n          [launchOptions objectForKey:@\"VAR\"];\n      }\n  }\n  ```\n\n>[!CAUTION]\n>\n>Adobe recommends choosing short variable names because notification size is limited to 4kB for iOS and Android.\n\n+++\n\n+++**Notification Service Extension**\n\n**For iOS**\n\nThe media has to be downloaded at the notification service extension level.\n\n```\n\n#import \"NotificationService.h\"\n\n@interface NotificationService ()\n\n@property (nonatomic, strong) void (^contentHandler)(UNNotificationContent *contentToDeliver);\n@property (nonatomic, strong) UNMutableNotificationContent *bestAttemptContent;\n\n@end\n\n@implementation NotificationService\n\n- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {\n    NSDictionary *userInfo = nil;\n    NSString *url = nil;\n\n    self.contentHandler = contentHandler;\n    self.bestAttemptContent = [request.content mutableCopy];\n\n    userInfo = request.content.userInfo;\n    if ( userInfo != nil )\n    {\n        url = userInfo[@\"mediaUrl\"];  // Get the url of the media to download (Adobe Campaign additional variable)\n    }\n    ...\n    // Perform the download to local storage\n\n```\n\n+++\n\n+++**Notification Content Extension**\n\n**For iOS**\n\nAt this level, you need to:\n\n* Associate your content extension to the category sent by Adobe Campaign:\n\n  If you want your mobile application to display an image, you can set the category value to \"image\" in Adobe Campaign and in your mobile application, you create a notification extension with the **UNNotificationExtensionCategory** parameter set to \"image\". When the push notification is received on the device, the extension is called according to the defined category value.\n\n* Define your notification layout\n\n  You need to define a layout with the relevant widgets. For an image, the widget is named **UIImageView**.\n\n* Display your media\n\n  You need to add code to feed the media data to the widget. Here is an example of code for an image:\n\n  ```\n\n  #import \"NotificationViewController.h\"\n  #import <UserNotifications/UserNotifications.h>\n  #import <UserNotificationsUI/UserNotificationsUI.h>\n\n  @interface NotificationViewController () <UNNotificationContentExtension>\n  \n  @property (strong, nonatomic) IBOutlet UIImageView *imageView;\n  @property (strong, nonatomic) IBOutlet UILabel *notifContent;\n  @property (strong, nonatomic) IBOutlet UILabel *label;\n  \n  @end\n\n  @implementation NotificationViewController\n\n  - (void)viewDidLoad {\n      [super viewDidLoad];\n      // Do any required interface initialization here.\n  }\n\n  - (void)didReceiveNotification:(UNNotification *)notification {\n      self.label.text = notification.request.content.title;\n      self.notifContent.text = notification.request.content.body;\n      UNNotificationAttachment *attachment = [notification.request.content.attachments objectAtIndex:0];\n      if ([attachment.URL startAccessingSecurityScopedResource])\n      {\n        NSData * imageData = [[NSData alloc] initWithContentsOfURL:attachment.URL];\n        self.imageView.image =[UIImage imageWithData: imageData];\n        [attachment.URL stopAccessingSecurityScopedResource];\n      }\n  }\n  @end\n  \n  ```\n\n+++\n","headers":[["title","Integrate Campaign SDK"],["description","Learn how to integrate Campaign SDK to your mobile app"],["feature","Mobile SDK Integration, Push"]],"sections":[{"section":"Integrate Campaign SDK with your app","sectionId":"84ea69d0-0a37-4c95-b0bf-53cc5ba14b03","paragraphs":["CAUTION","Adobe strongly recommends to use the Adobe Experience Platform Mobile SDK by configuring the Adobe Campaign extension in the Data Collection UI. The Adobe Experience Platform Mobile SDK helps power Adobe's Experience Cloud solutions and services in your mobile apps. SDKs configuration is managed through the Data Collection UI for flexible configuration and extensible, rules-based integrations. Learn more in Adobe Developer documentation.","To get Campaign SDK (previously known as Neolane SDK), contact Adobe Customer Care.","To learn more on the different Android and iOS versions supported, refer to the Compatibility matrix.","You can find below the integration steps for Campaign SDK.","+++Loading Campaign SDK","In Android: the neolane_sdk-release.aar file must be linked to the project.","The following permission grants access to the Adobe Campaign server:","Neolane.getInstance().setIntegrationKey(\"your Adobe mobile app integration key\");\nNeolane.getInstance().setMarketingHost(\"https://yourMarketingHost:yourMarketingPort/\");\nNeolane.getInstance().setTrackingHost(\"https://yourTrackingHost:yourTrackingPort/\");","The following permission allows you to recover a mobile's unique ID:","<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />","From version 1.0.24 of the SDK, this permission is only used for versions older than Android 6.0.","From version 1.0.26 of the SDK, this permission is no longer used.","In iOS: the libNeolaneSDK.a and Neolane_SDK.h files must be linked to the project. From version 1.0.24 of the SDK, the option ENABLE_BITCODE is activated.","NOTE","For version 1.0.25 of the SDK, the four architectures are available in the Neolane_SDK.h file.","+++","+++Declaring integration settings","To integrate Campaign SDK into the mobile application, the functional administrator must provide the following information to the developer:","An integration key: to enable the Adobe Campaign platform to identify the mobile application.","NOTE","This integration key is entered in the Adobe Campaign console, in the Information tab of service dedicated to the mobile application. Refer to Configuring a mobile application in Adobe Campaign.","A tracking URL: that matches the address of the Adobe Campaign tracking server.","A marketing URL: to enable the collection of subscriptions.","In Android:","Neolane.getInstance().setIntegrationKey(\"your Adobe mobile app integration key\");\nNeolane.getInstance().setMarketingHost(\"https://yourMarketingHost:yourMarketingPort/\");\nNeolane.getInstance().setTrackingHost(\"https://yourTrackingHost:yourTrackingPort/\");","In iOS:","Neolane_SDK *nl = [Neolane_SDK getInstance];\n[nl setMarketingHost:strMktHost];\n[nl setTrackingHost:strTckHost];\n[nl setIntegrationKey:strIntegrationKey];","+++","+++Registration function","The registration function enables you to:","send the notification ID or push ID (deviceToken for iOS and registrationID for Android) to Adobe Campaign.","recover the reconciliation key or userKey (email or account number, for instance)","In Android:","void registerInNeolane(String registrationId, String userKey, Context context)\n{\n try{\n  Neolane.getInstance().registerDevice(registrationToken, userKey, null, context);\n } catch (NeolaneException e){\n  //...\n } catch (IOException e){\n  //...\n }\n}","If you use FCM (Firebase Cloud Messaging), we advise you use the registerDevice function when calling the onTokenRefresh function to notify Adobe Campaign of the change in the user's mobile device token.","public class NeoTripFirebaseInstanceIDService extends FirebaseInstanceIdService {\n  @Override\n  public void onTokenRefresh() {\n    String registrationToken = FirebaseInstanceId.getInstance().getToken();\n    NeolaneAsyncRunner neolaneAs = new NeolaneAsyncRunner(Neolane.getInstance());\n    ...\n    ...\n    // Neolane Registration\n    neolaneAs.registerDevice(registrationToken, userKey, additionnalParam, this, new NeolaneAsyncRunner.RequestListener() {\n    public void onComplete(String e, Object state) \n    public void onNeolaneException(NeolaneException e, Object state) \n    public void onIOException(IOException e, Object state) \n    });\n    ...\n    ...\n  }\n}","In iOS:","// Callback called on successful registration to the APNs\n- (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n{\n    // Pass the token to Adobe Campaign\n    Neolane_SDK *nl = [Neolane_SDK getInstance];\n    [nl registerDevice:tokenString:self.userKey:dic];\n}","+++","+++Tracking function","In Android:","Tracking functions allow you to track notification activations (opens) and notification displays (screenshot).","To track the notification display (done by calling the notifyReceive function of the SDK), follow the implementation below. Note that if you use FCM (Firebase Cloud Messaging), we advise you to use the notifyReceive function when the onMessageReceived function is called by the Android system.","package com.android.YourApplication;","import android.content.Context;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.util.Log;","import com.google.firebase.messaging.FirebaseMessagingService;\nimport com.google.firebase.messaging.RemoteMessage;","import java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;","public class YourApplicationFirebaseMessagingService extends FirebaseMessagingService {\n  private static final String TAG = \"MyFirebaseMsgService\";","@Override\n  public void onMessageReceived(RemoteMessage message) {\n    Log.d(TAG, \"Receive message from: \" + message.getFrom());\n    Map<String,String> payloadData = message.getData();\n    final Bundle extras = new Bundle();\n    final Iterator<Entry<String, String>> iter = payloadData.entrySet().iterator();\n    while(iter.hasNext())\n    {\n      final Entry<String, String>  entry =iter.next();\n      extras.putString(entry.getKey(), entry.getValue());\n    }","SharedPreferences settings = this.getSharedPreferences(YourApplicationActivity.APPLICATION_PREF_NAME, Context.MODE_PRIVATE);\n    String mesg = payloadData.get(\"_msg\");\n    String title = payloadData.get(\"title\");\n    String url = payloadData.get(\"url\");\n    String messageId = payloadData.get(\"_mId\");\n    String deliveryId = payloadData.get(\"_dId\");\n    YourApplicationActivity.handleNotification(this, mesg, title, url, messageId, deliveryId, extras);\n  }\n}","public static void handleNotification(Context context, String message, String title, String url, String messageId, String deliveryId, Bundle extras){\n    if( message == null ) message = \"No Content\";\n    if( title == null )   title = \"No title\";\n    if( url == null )     url = \"https://www.tripadvisor.fr\";\n    int iconId = R.drawable.notif_neotrip;","// notify Neolane that a notification just arrived\n  SharedPreferences settings = context.getSharedPreferences(NeoTripActivity.APPLICATION_PREF_NAME, Context.MODE_PRIVATE);\n  Neolane.getInstance().setIntegrationKey(settings.getString(NeoTripActivity.APPUUID_NAME, NeoTripActivity.DFT_APPUUID));\n  Neolane.getInstance().setMarketingHost(settings.getString(NeoTripActivity.SOAPRT_NAME, NeoTripActivity.DFT_SOAPRT));\n  Neolane.getInstance().setTrackingHost(settings.getString(NeoTripActivity.TRACKRT_NAME, NeoTripActivity.DFT_TRACKRT));","NeolaneAsyncRunner nas = new NeolaneAsyncRunner(Neolane.getInstance());\n  nas.notifyReceive(Integer.valueOf(messageId), deliveryId, new NeolaneAsyncRunner.RequestListener() {\n    public void onNeolaneException(NeolaneException arg0, Object arg1) \n    public void onIOException(IOException arg0, Object arg1) \n    public void onComplete(String arg0, Object arg1)\n  });\n  if (yourApplication.isActivityVisible())\n    {\n      Log.i(\"INFO\", \"The application has the focus\" );\n      ...\n    }\n    else\n    {\n      // notification creation :\n      NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n      Notification notification;","// Activity to start :\n      Intent notifIntent = new Intent(context.getApplicationContext(), NotificationActivity.class);\n      notifIntent.putExtra(\"notificationText\", message);\n      notifIntent.putExtra(NotificationActivity.NOTIFICATION_URL_KEYNAME, url);\n      notifIntent.putExtra(\"_dId\", deliveryId);\n      notifIntent.putExtra(\"_mId\", messageId);\n      notifIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n      PendingIntent contentIntent = PendingIntent.getActivity(context, 1, notifIntent, PendingIntent.FLAG_UPDATE_CURRENT);","notification = new Notification.Builder(context)\n              .setContentTitle(title)\n              .setContentText(message)\n              .setSmallIcon(iconId)\n              .setContentIntent(contentIntent)\n              .build();","// launch the notification :\n      notification.flags |= Notification.FLAG_AUTO_CANCEL;\n      notificationManager.notify(Integer.valueOf(messageId), notification);\n    }\n}","Here is an implementation example for tracking a notification open (executed by calling the notifyOpening function of the SDK). The NotificationActivity class corresponds to the one used to create the notifIntent object in the previous example.","public class NotificationActivity extends Activity {\npublic void onCreate(Bundle savedBundle) {\n  [...]\n  Bundle extra = getIntent().getExtras();\n  if (extra != null) {\n    // reinit the acc sdk\n    SharedPreferences settings = getSharedPreferences(NeoTripActivity.APPLICATION_PREF_NAME, Context.MODE_PRIVATE);\n    Neolane.getInstance().setIntegrationKey(settings.getString(NeoTripActivity.APPUUID_NAME, NeoTripActivity.DFT_APPUUID));\n    Neolane.getInstance().setMarketingHost(settings.getString(NeoTripActivity.SOAPRT_NAME, NeoTripActivity.DFT_SOAPRT));               \n    Neolane.getInstance().setTrackingHost(settings.getString(NeoTripActivity.TRACKRT_NAME, NeoTripActivity.DFT_TRACKRT));","// Get the messageId and the deliveryId to do the tracking\n    String deliveryId = extra.getString(\"_dId\");\n    String messageId = extra.getString(\"_mId\");\n    if (deliveryId != null && messageId != null) {\n      try {\n        Neolane.getInstance().notifyOpening(Integer.valueOf(messageId), Integer.valueOf(deliveryId));\n      } catch (NeolaneException e) {\n        // ...\n      } catch (IOException e) {\n        // ...\n      }\n    }\n  }\n }\n}","In iOS:","The tracking function allows you to track when notifications are activated (opens).","(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\nif( launchOptions ) { // Retrieve notification parameters here ... // Track application opening Neolane_SDK\n*nl = [Neolane_SDK getInstance]; [nl track:launchOptions:NL_TRACK_CLICK]; } \n...  \ncompletionHandler(UIBackgroundFetchResultNoData);\n}","NOTE","From version 7.0, once the application:didReceiveRemoteNotification:fetchCompletionHandler function is implemented, the operating system only calls this function. The application:didReceiveRemoteNotification function is therefore not called.","+++","+++Silent notification tracking","iOS lets you send silent notifications, a notification or data which will be directly sent to a mobile application without displaying it. Adobe Campaign allows you to track them.","To track your silent notification, follow the example below:","// AppDelegate.m\n...\n...\n#import \"AppDelegate.h\"\n#import \"Neolane_SDK.h\"\n...\n...\n// Callback called when the application is already launched (whether the application is running foreground or background)\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n NSLog(@\"IN didReceiveRemoteNotification:fetchCompletionHandler\");\n if (launchOptions) NSLog(@\"IN launchOptions: %@\", [launchOptions description]);\n NSLog(@\"Application state: %ld\", (long)application.applicationState);","// Silent Notification (specific case, can use NL_TRACK_RECEIVE as the user doesn't have click/open the notification)\n if ([launchOptions[@\"aps\"][@\"content-available\"] intValue] == 1 )\n       {\n  NSLog(@\"Silent Push Notification\");\n  ...  \n  ...\n  //Call receive tracking\n        Neolane_SDK *nl = [Neolane_SDK getInstance];\n  [nl track:launchOptions:NL_TRACK_RECEIVE];","completionHandler(UIBackgroundFetchResultNoData); //Do not show notification\n  return;\n }  \n ...\n ...\n        completionHandler(UIBackgroundFetchResultNoData);\n}","+++","+++RegisterDeviceStatus delegate","NOTE","Please note that this is exclusive to iOS.","In iOS, the delegate protocol allows you to get the result of the registerDevice call and can be used to know if an error occurred during registration.","The registerDeviceStatus prototype is:","- (void) registerDeviceStatus: (ACCRegisterDeviceStatus) status:(NSString *) errorReason;","Status allows you to know if a registration succeeded or if an error occurred.","ErrorReason provides you with more information on the errors that occurred. For more information on available errors and their descriptions, refer to the table below.","TABLE: Status Description ErrorReason ACCRegisterDeviceStatusSuccess Registration Succeeded EMPTY ACCRegisterDeviceStatusFailureMarketingServerHostnameEmpty The ACC marketing server hostname is empty or not set. EMPTY ACCRegisterDeviceStatusFailureIntegrationKeyEmpty The integration key is empty or not set. EMPTY ACCRegisterDeviceStatusFailureConnectionIssue Connection issue with ACC More information (in OS current language) ACCRegisterDeviceStatusFailureUnknownUUID The provided UUID (integration key) is unknown. EMPTY ACCRegisterDeviceStatusFailureUnexpectedError Unexpected error returned to ACC server. The error message returned to ACC.","Neolane_SDKDelegate protocol and registerDeviceStatus delegate definition is as follows:","//  Neolane_SDK.h\n//  Neolane SDK\n..\n.. \n// Register Device Status Enum\ntypedef NS_ENUM(NSUInteger, ACCRegisterDeviceStatus) {\n ACCRegisterDeviceStatusSuccess,                               // Resistration Succeed\n ACCRegisterDeviceStatusFailureMarketingServerHostnameEmpty,   // The ACC marketing server hostname is Empty or not set\n ACCRegisterDeviceStatusFailureIntegrationKeyEmpty,            // The integration key is empty or not set\n ACCRegisterDeviceStatusFailureConnectionIssue,                // Connection issue with ACC, more information in errorReason\n ACCRegisterDeviceStatusFailureUnknownUUID,                    // The provided UUID (integration key) is unknown\n ACCRegisterDeviceStatusFailureUnexpectedError                 // Unexpected error returned by ACC server, more information in errorReason\n};\n// define the protocol for the registerDeviceStatus delegate\n@protocol Neolane_SDKDelegate <NSObject>\n@optional\n- (void) registerDeviceStatus: (ACCRegisterDeviceStatus) status :(NSString *) errorReason;\n@end\n@interface Neolane_SDK: NSObject {\n} \n...\n...\n// registerDeviceStatus delegate\n@property (nonatomic, weak) id <Neolane_SDKDelegate> delegate;\n...\n...\n@end","To implement registerDeviceStatus delegate, follow these steps:","Implement the setDelegate during the SDK initialization.","// AppDelegate.m\n...\n... \n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n...\n...\n // Get the stored settings","NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n NSString *strMktHost = [defaults objectForKey:@\"mktHost\"];\n NSString *strTckHost = [defaults objectForKey:@\"tckHost\"];\n NSString *strIntegrationKey = [defaults objectForKey:@\"integrationKey\"];\n userKey = [defaults objectForKey:@\"userKey\"];","// Configure Neolane SDK on first launch\n Neolane_SDK *nl = [Neolane_SDK getInstance];\n [nl setMarketingHost:strMktHost];\n [nl setTrackingHost:strTckHost];\n [nl setIntegrationKey:strIntegrationKey];\n [nl setDelegate:self];    // HERE\n...\n...\n}","Add the protocol in the @interface of your class.","//  AppDelegate.h","#import <UIKit/UIKit.h>\n#import <CoreLocation/CoreLocation.h>\n#import \"Neolane_SDK.h\"","@class LandingPageViewController;","@interface AppDelegate : UIResponder <UIApplicationDelegate, CLLocationManagerDelegate, Neolane_SDKDelegate> {\n    CLLocationManager *locationManager;\n    NSString *userKey;\n    NSString *mktServerUrl;\n    NSString *tckServerUrl;\n    NSString *homeURL;\n    NSString *strLandingPageUrl;\n    NSTimer *timer;\n}","Implement the delegate in the AppDelegate.","//  AppDelegate.m","#import \"AppDelegate.h\"\n#import \"Neolane_SDK.h\"\n#import \"LandingPageViewController.h\"\n#import \"RootViewController.h\"\n...\n...\n- (void) registerDeviceStatus: (ACCRegisterDeviceStatus) status :(NSString *) errorReason\n{\n    NSLog(@\"registerStatus: %lu\",status);","if ( errorReason != nil )\n        NSLog(@\"errorReason: %@\",errorReason);","if( status == ACCRegisterDeviceStatusSuccess )\n    {\n        // Registration successful\n        ...\n        ...\n    }\n    else { // An error occurred\n        NSString *message;\n        switch ( status ){\n            case ACCRegisterDeviceStatusFailureUnknownUUID:\n                message = @\"Unkown IntegrationKey (UUID)\";\n                break;\n            case ACCRegisterDeviceStatusFailureMarketingServerHostnameEmpty:\n                message = @\"Marketing URL not set or Empty\";\n                break;\n            case ACCRegisterDeviceStatusFailureIntegrationKeyEmpty:\n                message = @\"Integration Key not set or empty\";\n                break;\n            case ACCRegisterDeviceStatusFailureConnectionIssue:\n                message = [NSString stringWithFormat:@\"%@ %@\",@\"Connection issue:\",errorReason];\n                break;\n            case ACCRegisterDeviceStatusFailureUnexpectedError:\n            default:\n                message = [NSString stringWithFormat:@\"%@ %@\",@\"Unexpected Error\",errorReason];\n                break;\n        }\n ...\n ...\n    }\n}\n@end","+++","+++Variables","The variables let you define mobile application behavior after receiving a notification. These variables must be defined in the mobile application code and in the Adobe Campaign console, in the Variables tab in the dedicated mobile application (see Configuring a mobile application in Adobe Campaign). Here is an example of a code that allows a mobile application to collect any added variables in a notification. In our example, we are using the \"VAR\" variable.","In Android:","public void onReceive(Context context, Intent intent) {\n     ...\n    String event = intent.getStringExtra(\"VAR\");\n     ...\n}","In iOS:","- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    ....\n    if( launchOptions )\n    {\n        // When application is not already launched, the notification data if any are stored in the key 'UIApplicationLaunchOptionsRemoteNotificationKey'\n        NSDictionary *localLaunchOptions = [launchOptions objectForKey:@\"UIApplicationLaunchOptionsRemoteNotificationKey\"];\n        if( localLaunchOptions )\n        {\n         ...\n         [localLaunchOptions objectForKey:@\"VAR\"];\n        ...\n        }\n   }\n}","// Callback called when the application is already launched (whether the application is running foreground or background)\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions\n{\n    if( launchOptions )\n    {\n     ...\n        [launchOptions objectForKey:@\"VAR\"];\n    }\n}","CAUTION","Adobe recommends choosing short variable names because notification size is limited to 4kB for iOS and Android.","+++","+++Notification Service Extension","For iOS","The media has to be downloaded at the notification service extension level.","#import \"NotificationService.h\"","@interface NotificationService ()","@property (nonatomic, strong) void (^contentHandler)(UNNotificationContent *contentToDeliver);\n@property (nonatomic, strong) UNMutableNotificationContent *bestAttemptContent;","@end","@implementation NotificationService","- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {\n    NSDictionary *userInfo = nil;\n    NSString *url = nil;","self.contentHandler = contentHandler;\n    self.bestAttemptContent = [request.content mutableCopy];","userInfo = request.content.userInfo;\n    if ( userInfo != nil )\n    {\n        url = userInfo[@\"mediaUrl\"];  // Get the url of the media to download (Adobe Campaign additional variable)\n    }\n    ...\n    // Perform the download to local storage","+++","+++Notification Content Extension","For iOS","At this level, you need to:","Associate your content extension to the category sent by Adobe Campaign:","If you want your mobile application to display an image, you can set the category value to \"image\" in Adobe Campaign and in your mobile application, you create a notification extension with the UNNotificationExtensionCategory parameter set to \"image\". When the push notification is received on the device, the extension is called according to the defined category value.","Define your notification layout","You need to define a layout with the relevant widgets. For an image, the widget is named UIImageView.","Display your media","You need to add code to feed the media data to the widget. Here is an example of code for an image:","#import \"NotificationViewController.h\"\n#import <UserNotifications/UserNotifications.h>\n#import <UserNotificationsUI/UserNotificationsUI.h>","@interface NotificationViewController () <UNNotificationContentExtension>","@property (strong, nonatomic) IBOutlet UIImageView *imageView;\n@property (strong, nonatomic) IBOutlet UILabel *notifContent;\n@property (strong, nonatomic) IBOutlet UILabel *label;","@end","@implementation NotificationViewController","- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any required interface initialization here.\n}","- (void)didReceiveNotification:(UNNotification *)notification {\n    self.label.text = notification.request.content.title;\n    self.notifContent.text = notification.request.content.body;\n    UNNotificationAttachment *attachment = [notification.request.content.attachments objectAtIndex:0];\n    if ([attachment.URL startAccessingSecurityScopedResource])\n    {\n      NSData * imageData = [[NSData alloc] initWithContentsOfURL:attachment.URL];\n      self.imageView.image =[UIImage imageWithData: imageData];\n      [attachment.URL stopAccessingSecurityScopedResource];\n    }\n}\n@end","+++"]}]}