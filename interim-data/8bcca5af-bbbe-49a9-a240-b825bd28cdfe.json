{"guid":"8bcca5af-bbbe-49a9-a240-b825bd28cdfe","title":"Send personalized alerts to operators","path":"help\\workflow\\using\\sending-personalized-alerts-to-operators.md","fullText":"---\nproduct: campaign\ntitle: Send personalized alerts to operators\ndescription: Learn how to send personalized alerts to operators\nfeature: Workflows\nexl-id: 21c97eb3-60cd-4d19-bc0f-5ba9ec17e70a\n---\n# Send personalized alerts to operators{#sending-personalized-alerts-to-operators}\n\n\n\nIn this example, we want to send an alert to an operator that will contain the name of profiles who opened a newsletter but did not click the link it contains.\n\nThe profiles' first and last name fields are linked to the **[!UICONTROL Recipients]** targeting dimension, whereas the **[!UICONTROL Alert]** activity is linked to the **[!UICONTROL Operator]** targeting dimension. As a result, there is no field available between the two targeting dimensions to perform a reconciliation and retrieve the first and last name fields, and display them in the Alert activity.\n\nThe process is to build a workflow as below:\n\n1. Use a **[!UICONTROL Query]** activity to target data.\n1. Add a **[!UICONTROL JavaScript code]** activity into the workflow to save the population form the query to the instance variable.\n1. Use a **[!UICONTROL Test]** activity to check the population count.\n1. Use an **[!UICONTROL Alert]** activity to send an alert to an operator, depending on the **[!UICONTROL Test]** activity result.\n\n![](assets/uc_operator_1.png)\n\n## Saving the population to the instance variable {#saving-the-population-to-the-instance-variable}\n\nAdd the code below into the **[!UICONTROL JavaScript code]** activity.\n\n```\nvar query = xtk.queryDef.create(  \n    <queryDef schema=\"temp:query\" operation=\"select\">  \n      <select>  \n       <node expr=\"[target/recipient.@firstName]\"/>  \n       <node expr=\"[target/recipient.@lastName]\"/>  \n      </select>  \n     </queryDef>  \n  );  \n  var items = query.ExecuteQuery();\n```\n\nMake sure that the Javascript code corresponds to your workflow information:\n\n* The **[!UICONTROL queryDef schema]** tag should corresponds to the name of the targeting dimension used in the query activity.\n* The **[!UICONTROL node expr]** tag should correspond to the name of the fields you want to retrieve.\n\n![](assets/uc_operator_3.png)\n\nTo retrieve these information, follow the steps below:\n\n1. Right-click the outbound transition from the **[!UICONTROL Query]** activity, then select **[!UICONTROL Display the target]**.\n\n   ![](assets/uc_operator_4.png)\n\n1. Right-click the list, then select **[!UICONTROL Configure list]**.\n\n   ![](assets/uc_operator_5.png)\n\n1. The query targeting dimension and fields names display in the list.\n\n   ![](assets/uc_operator_6.png)\n\n## Testing the population count {#testing-the-population-count}\n\nAdd the code below into the **[!UICONTROL Test]** activity to check if the targeted population contains at least 1 profile.\n\n```\nvar.recCount>0\n```\n\n![](assets/uc_operator_7.png)\n\n## Setting up the alert {#setting-up-the-alert}\n\nNow that the population has been added into the instance variable with the desired fields, you can add these information into the **[!UICONTROL Alert]** activity.\n\nTo do this, add into the **[!UICONTROL Source]** tab the code below:\n\n```\n<ul>\n<%\nvar items = new XML(instance.vars.items)\nfor each (var item in items){\n%>\n<li><%= item.target.@firstName %> <%= item.target.@lastName %></li>\n<%\n} %></ul>\n```\n\n>[!NOTE]\n>\n>The **[!UICONTROL <%= item.target.recipient.@fieldName %>]** command lets you add one of the fields that have been saved to the instance variable through the **[!UICONTROL JavaScript code]** activity.  \n>You can add as many fields as desired, as long as they have been inserted into the JavaScript code.\n\n![](assets/uc_operator_8.png)\n","headers":[["title","Send personalized alerts to operators"],["description","Learn how to send personalized alerts to operators"],["feature","Workflows"]],"sections":[{"section":"Send personalized alerts to operators","sectionId":"014dc516-3c33-4bc5-8a04-2d925377d314","paragraphs":["In this example, we want to send an alert to an operator that will contain the name of profiles who opened a newsletter but did not click the link it contains.","The profiles' first and last name fields are linked to the Recipients targeting dimension, whereas the Alert activity is linked to the Operator targeting dimension. As a result, there is no field available between the two targeting dimensions to perform a reconciliation and retrieve the first and last name fields, and display them in the Alert activity.","The process is to build a workflow as below:","Use a Query activity to target data.\nAdd a JavaScript code activity into the workflow to save the population form the query to the instance variable.\nUse a Test activity to check the population count.\nUse an Alert activity to send an alert to an operator, depending on the Test activity result."]},{"section":"Saving the population to the instance variable","sectionId":"7b00135e-8df2-4236-8503-14e63366bb32","paragraphs":["Add the code below into the JavaScript code activity.","var query = xtk.queryDef.create(  \n    <queryDef schema=\"temp:query\" operation=\"select\">  \n      <select>  \n       <node expr=\"[target/recipient.@firstName]\"/>  \n       <node expr=\"[target/recipient.@lastName]\"/>  \n      </select>  \n     </queryDef>  \n  );  \n  var items = query.ExecuteQuery();","Make sure that the Javascript code corresponds to your workflow information:","The queryDef schema tag should corresponds to the name of the targeting dimension used in the query activity.\nThe node expr tag should correspond to the name of the fields you want to retrieve.","To retrieve these information, follow the steps below:","Right-click the outbound transition from the Query activity, then select Display the target.","Right-click the list, then select Configure list.","The query targeting dimension and fields names display in the list."]},{"section":"Testing the population count","sectionId":"2f76e2c5-043b-4c57-87f6-978b9b22a5b9","paragraphs":["Add the code below into the Test activity to check if the targeted population contains at least 1 profile.","var.recCount>0"]},{"section":"Setting up the alert","sectionId":"82cde23c-cddf-4199-a7e7-105b96ad22b3","paragraphs":["Now that the population has been added into the instance variable with the desired fields, you can add these information into the Alert activity.","To do this, add into the Source tab the code below:","<ul>\n<%\nvar items = new XML(instance.vars.items)\nfor each (var item in items){\n%>\n<li><%= item.target.@firstName %> <%= item.target.@lastName %></li>\n<%\n} %></ul>","NOTE","The <%= item.target.recipient.@fieldName %> command lets you add one of the fields that have been saved to the instance variable through the JavaScript code activity.\nYou can add as many fields as desired, as long as they have been inserted into the JavaScript code."]}]}