{"guid":"7b12bf54-cb26-4a4e-9ee3-3c89afaa977f","title":"SQL code and JavaScript code","path":"help\\workflow\\using\\sql-code-and-javascript-code.md","fullText":"---\nproduct: campaign\ntitle: SQL code and JavaScript code\ndescription: Learn more about SQL and JavaScript codes workflow activities\nfeature: Workflows\nexl-id: 729a2010-c2d8-481b-8c9e-780b9e5f97ef\n---\n# SQL code and JavaScript code{#sql-code-and-javascript-code}\n\n\n\n## SQL code {#sql-code}\n\nAn **[!UICONTROL SQL code]** activity executes an SQL script. The script is a JST template.\n\n   ![](assets/sql_code.png)\n\n* **[!UICONTROL Script]**\n\n  The central area of the editor contains the script to be executed. This script is a JST template and can therefore be configured according to the workflow context.\n\n* **[!UICONTROL Processing errors]**\n\n  Refer to [Processing errors](monitoring-workflow-execution.md#processing-errors).\n\n## JavaScript code and Advanced JavaScript code {#javascript-code}\n\n**[!UICONTROL JavaScript code]** and **[!UICONTROL Advanced JavaScript code]** activities execute a JavaScript script in the context of a workflow. For more on scripting, refer to these sections:\n\n* [JavaScript scripts and templates](javascript-scripts-and-templates.md)\n* [Examples of JavaScript code in workflows](javascript-in-workflows.md)\n\n### Execution delay {#exec-delay}\n\nStarting 20.2 release, an execution delay has been added to the **[!UICONTROL JavaScript code]** and **[!UICONTROL Advanced JavaScript code]** activities. By default, the execution phase cannot exceed 1 hour. After this delay, the process will be aborted with an error message and the activity execution will fail.\n\nYou can change this delay in the **[!UICONTROL Stop execution after]** field available in these activities.\n\nTo ignore this limit, you need to set the value to **0**.\n\n### JavaScript code {#js-code-desc}\n\n![](assets/javascript_code.png)\n\n* **[!UICONTROL Script]**: The central area of the editor contains the script to be executed.\n\n* **[!UICONTROL Process errors]**: Refer to [Processing errors](monitoring-workflow-execution.md#processing-errors).\n\n### Advanced JavaScript code {#adv-js-code-desc}\n\n![](assets/advanced_javascript_code.png)\n\n* **[!UICONTROL First call]**: The first zone of the editor contains the script to execute during the first call.\n* **[!UICONTROL Next calls]**: The second zone of the editor contains the script to execute during the next calls.\n* **[!UICONTROL Transitions]**: You can define several activity output transitions.\n* **[!UICONTROL Schedule]**: The **[!UICONTROL Schedule]** tab lets you schedule when to trigger the activity.\n\nAdvanced JavaScript is a persistent task and is periodically recalled if it has not been marked as completed. To terminate the task and prevent future recalls, you must use the **task.setCompleted()** method in the **[!UICONTROL Next calls]** section:\n\n```\ntask.postEvent(task.transitionByName(\"ok\")); // to transition to Ok branch\ntask.setCompleted();\n\nreturn 0;\n```\n","headers":[["title","SQL code and JavaScript code"],["description","Learn more about SQL and JavaScript codes workflow activities"],["feature","Workflows"]],"sections":[{"section":"SQL code and JavaScript code","sectionId":"e8a050c5-4453-45d9-be2e-7bf8458acef4","paragraphs":[]},{"section":"SQL code","sectionId":"62245110-0a95-4d32-9e39-8e616909efd1","paragraphs":["An SQL code activity executes an SQL script. The script is a JST template.","","Script","The central area of the editor contains the script to be executed. This script is a JST template and can therefore be configured according to the workflow context.","Processing errors","Refer to Processing errors."]},{"section":"JavaScript code and Advanced JavaScript code","sectionId":"0a54c5b2-1b8c-49d7-8d2b-e539090e60d0","paragraphs":["JavaScript code and Advanced JavaScript code activities execute a JavaScript script in the context of a workflow. For more on scripting, refer to these sections:","JavaScript scripts and templates\nExamples of JavaScript code in workflows"]},{"section":"Execution delay","sectionId":"1289bce1-438f-4823-a72d-a3693eaf1d69","paragraphs":["Starting 20.2 release, an execution delay has been added to the JavaScript code and Advanced JavaScript code activities. By default, the execution phase cannot exceed 1 hour. After this delay, the process will be aborted with an error message and the activity execution will fail.","You can change this delay in the Stop execution after field available in these activities.","To ignore this limit, you need to set the value to 0."]},{"section":"JavaScript code","sectionId":"8231f290-c431-4665-9d81-f8d4767a7cb5","paragraphs":["Script: The central area of the editor contains the script to be executed.","Process errors: Refer to Processing errors."]},{"section":"Advanced JavaScript code","sectionId":"72eca7e7-48cd-47a2-af42-299d25370d59","paragraphs":["First call: The first zone of the editor contains the script to execute during the first call.\nNext calls: The second zone of the editor contains the script to execute during the next calls.\nTransitions: You can define several activity output transitions.\nSchedule: The Schedule tab lets you schedule when to trigger the activity.","Advanced JavaScript is a persistent task and is periodically recalled if it has not been marked as completed. To terminate the task and prevent future recalls, you must use the task.setCompleted() method in the Next calls section:","task.postEvent(task.transitionByName(\"ok\")); // to transition to Ok branch\ntask.setCompleted();","return 0;"]}]}