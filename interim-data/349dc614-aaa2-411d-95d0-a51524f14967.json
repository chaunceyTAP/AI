{"guid":"349dc614-aaa2-411d-95d0-a51524f14967","title":"Examples of JavaScript code in workflows","path":"help\\workflow\\using\\javascript-in-workflows.md","fullText":"---\nproduct: campaign\ntitle: Examples of JavaScript code in workflows\ndescription: These examples show how you can use JavaScript code in a workflow\nfeature: Workflows\nexl-id: 7213ea64-3dec-4b16-9d93-4ae941ddfaa7\n---\n# Examples of JavaScript code in workflows{#javascript-in-workflows}\n\n\n\nThese examples show how you can use JavaScript code in a workflow:\n\n* [Write to the database](#write-example)\n* [Query the database](#read-example)\n* [Trigger a workflow, using a static SOAP method](#trigger-example)\n* [Interact with the database, using a non-static SOAP method](#interact-example)\n\n[Learn more](https://experienceleague.adobe.com/developer/campaign-api/api/p-14.html) about static and non-static SOAP methods.\n\nIn these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.\n\nTo try out these examples, follow these steps:\n\n1. Create a workflow and add these activities to the workflow:\n   1. Start activity\n   1. JavaScript code activity\n   1. End activity\n\n    [Learn more](building-a-workflow.md) about building workflows.\n\n1. Add the JavaScript code to an activity. [Learn more](advanced-parameters.md).\n1. Save the workflow.\n1. Test the examples:\n   1. Start the workflow. [Learn more](starting-a-workflow.md).\n   1. Open the journal. [Learn more](monitoring-workflow-execution.md#displaying-logs).\n\n## Example 1: write to the database{#write-example}\n\nTo write to the database, you can use the static `Write` method on the `xtk:session` schema:\n\n1. Compose a write request in XML.\n\n1. Write the record:\n\n   1. Call the `Write` method on the `xtk:session` schema.\n      \n      >[!IMPORTANT]\n      > If you use Adobe Campaign v8, we recommend that you use the staging mechanism with the **Ingestion** and **Data update/delete** APIs for the `Write` method in a Snowflake table. [Read more](https://experienceleague.adobe.com/docs/campaign/campaign-v8/architecture/api/new-apis.html){target=\"_blank\"}.\n\n   1. Pass the XML code as an argument for the write request.\n\n### Step 1: compose a write request\n\nYou can add, update, and delete records.\n\n#### Insert a record\n\nBecause the `insert` operation is the default operation, you do not need to specify it.\n\nSpecify this information as XML attributes:\n\n* The schema of the table to be modified\n* The table fields to be populated\n\nExample:\n\n```javascript\nvar myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>\n```\n\n#### Update a record\n\nUse the `_update` operation. [Learn more](../../configuration/using/data-oriented-apis.md).\n\nSpecify this information as XML attributes:\n\n* The schema of the table to be modified\n* The table fields to be updated\n* The key argument that is required to identify the record to be updated\n\nExample:\n\n```javascript\nvar myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>\n```\n\n#### Delete a record\n\nUse the `DeleteCollection` method. [Learn more](https://experienceleague.adobe.com/developer/campaign-api/api/sm-session-DeleteCollection.html). \n\nSpecify this information:\n\n* The schema of the table to be modified\n* The `where` clause that is required to identify the record to be updated, in the form of an XML element\n\nExample:\n\n```javascript\nxtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )\n```\n\n### Step 2: write the record\n\nCall the non-static `Write` method on the `xtk:session` schema:\n\n```javascript\nxtk.session.Write(myXML)\n```\n\nNo value is returned for this method.\n\nAdd the complete code to a JavaScript code activity in the workflow:\n\n```javascript\nvar myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>\n\nxtk.session.Write(myXML)\n```\n\nThis video shows how to write to the database:\n>[!VIDEO](https://video.tv.adobe.com/v/18472/?learn=on)\n\n## Example 2: query the database{#read-example}\n\nTo query the database, you can use the non-static `xtk:queryDef` instance method:\n\n1. Compose a query in XML.\n1. Create a query object.\n1. Run the query.\n\n### Step 1: compose a query\n\nSpecify the XML code for a `queryDef` entity.\n\nSyntax:\n\n```xml\n<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>\n```\n\nSpecify this information:\n\n* The schema of the table to be read\n* The operation\n* The columns to be returned, in a `select` clause\n* The conditions, in a `where` clause\n* The filtering criteria, in an `orderBy` clause\n\nYou can use these operations:\n\n| Operation | Result |\n| --- | --- |\n| `select` | Zero or more elements are returned as a collection. |\n| `getIfExists` | One element is returned. If no match element exists, then an empty element is returned. |\n| `get` | One element is returned. If no match element exists, then an error is returned. |\n| `count` | The number of matching records is returned in the form of an element with a `count` attribute. |\n\nWrite the `select`, `where`, and `orderBy` clauses as XML elements:\n\n* `select` clause\n\n    Specify the columns to be returned. For example, to select the person's first name and last name, write this code:\n\n    ```xml\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n    ```\n\n    With the `nms:recipient` schema, elements are returned in this form:\n\n    ```xml\n    <recipient firstName=\"Bo\" lastName=\"Didley\"/>\n    ```\n\n* `where` clause\n\n    To specify conditions, use a `where` clause. For example, to select the records that are located in the **Training** folder, you can write this code:\n\n    ```xml\n    <where>\n        <condition expr=\"[folder/@label]='Training'\"/>\n    </where>\n    ```\n\n    When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:\n\n    ```xml\n    <condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n    <condition expr=\"@lastName='Garcia'\"/>\n    ```\n\n* `orderBy` clause\n\n    To sort the result set, specify the `orderBy` clause as an XML element with the `sortDesc` attribute. For example, to sort the last names in ascending order, you can write this code:\n\n    ```xml\n    <orderBy>\n        <node expr=\"@lastName> sortDesc=\"false\"/>\n    </orderBy>\n    ```\n\n### Step 2: create a query object\n\nTo create an entity from the XML code, use the `create(`*`content`*`)` method:\n\n```javascript\nvar query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)\n```\n\nPrefix the `create(`*`content`*`)` method with the schema of the entity to be created.\n\nThe *`content`* argument is a string argument and is optional. This argument contains the XML code that describes the entity.\n\n### Step 3: run the query\n\nFollow these steps:\n\n1. Call the `ExecuteQuery` method on the `queryDef` entity:\n\n    ```javascript\n    var res = query.ExecuteQuery()\n    ```\n\n1. Process the results:\n   1. Iterate over the results of the `select` operation, using a loop construct.\n   1. Test the results, using the `getIfExists` operation.\n   1. Count the results, using the `count` operation.\n\n#### Results of a `select` operation\n\nAll the matches are returned as a collection:\n\n```xml\n<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>\n```\n\nTo iterate over the results, use the `for each` loop:\n\n```javascript\nfor each (var rcp in res:recipient)\n    logInfo(rcp.@email)\n```\n\nThe loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. [Learn more](https://experienceleague.adobe.com/developer/campaign-api/api/f-logInfo.html) about the `logInfo` function.\n\n#### Results of a `getIfExists` operation\n\nEach match is returned as an element:\n\n```xml\n<recipient id=\"52,378,079\">\n```\n\n If there is no match, then an empty element is returned:\n\n```xml\n<recipient/>\n```\n\nYou can refer to the primary key node—for example, the `@id` attribute:\n\n```javascript\nif (res.@id !=undefined)\n    { // match was found\n    …\n    }\n```\n\n#### Result of a `get` operation\n\nOne match is returned as an element:\n\n```xml\n<recipient id=\"52,378,079\">\n```\n\nIf there is no match, then an error is returned.\n\n>[!TIP]\n>\n>If you know that there is a match, use the `get` operation. Otherwise, use the `getIfExists` operation. If you use this best practice, then errors reveal unexpected problems. If you use the `get` operation, do not use the `try…catch` statement. The problem is handled by the error handling process of the workflow.\n\n#### Result of a `count` operation\n\nAn element with the `count` attribute is returned:\n\n```xml\n<recipient count=\"200\">\n```\n\nTo use the result, refer to the `@count` attribute:\n\n```javascript\nif (res.@count > 0)\n    { // matches were found\n    …\n    }\n```\n\nFor the `select` operation, add this code to a JavaScript code activity in the workflow:\n\n```javascript\nvar myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>\n\nvar query = xtk.queryDef.create(myXML)\n\nvar res = query.ExecuteQuery()\n\nfor each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)\n```\n\nBecause the `select` operation is the default operation, you do not need to specify it.\n\nThis video shows how to read from the database:\n>[!VIDEO](https://video.tv.adobe.com/v/18475/?learn=on)\n\n## Trigger a workflow {#trigger-example}\n\nYou can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.\n\nWorkflow triggering works through the use of events. You can use these features for events:\n\n* To post an event, you can use the static `PostEvent` method. [Learn more](https://experienceleague.adobe.com/developer/campaign-api/api/sm-workflow-PostEvent.html).\n* To receive an event, you can use the **[!UICONTROL External signal]** activity. [Learn more](external-signal.md).\n\nYou can trigger workflows in different ways:\n\n* You can trigger a workflow inline, that is, from the main script of a **[!UICONTROL JavaScript code]** activity.\n* You can trigger a workflow upon completion of another:\n  * Add an initialization script to the **[!UICONTROL End]** activity of the initial workflow.\n  * Add the **[!UICONTROL External signal]** activity at the start of the target workflow.\n\n    Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.\n\n    >[!TIP]\n    >\n    >As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, `-- end --`. [Learn more](workflow-best-practices.md) about workflow best practices.\n\nSyntax of the `PostEvent` method:\n\n```javascript\nPostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)\n```\n\nIn this example, upon completion of the workflow, a short text is passed to the **signal** activity of the **wkfExampleReceiver** workflow:\n\n```javascript\nvar strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine={strLabel}/>,\n    false)\n```\n\nBecause the last parameter is set to `false`, the **wkfExampleReceiver** workflow is triggered every time the initial workflow is completed.\n\nWhen you trigger workflows, bear these principles in mind:\n\n* The `PostEvent` command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\n* The target workflow must be started. Otherwise, an error is written to the log file.\n* If the target workflow is suspended, then the `PostEvent` command is queued until the workflow resumes.\n* The triggered activity does not require that a task be in progress.\n\nThis video shows how to use static API methods:\n>[!VIDEO](https://video.tv.adobe.com/v/18481/?learn=on)\n\nThis video shows how to trigger workflows:\n>[!VIDEO](https://video.tv.adobe.com/v/18485/?learn=on)\n\n## Interact with the database {#interact-example}\n\nThese examples show how to perform these actions:\n\n* Use the `get` and `create` methods on schemas to use non-static SOAP methods\n* Create methods that perform SQL queries\n* Use the `write` method to insert, update, and delete records\n\nFollow these steps:\n\n1. Define the query:\n\n   * Retrieve an entity by using the `create` method on the corresponding schema—for example, the `xtk:workflow` schema. [Learn more](https://experienceleague.adobe.com/developer/campaign-api/api/f-create.html).\n   * Use the `queryDef` method to issue an SQL query.\n\n1. Run the query using the `ExecuteQuery` method. [Learn more](https://experienceleague.adobe.com/developer/campaign-api/api/sm-queryDef-ExecuteQuery.html).\n\n   Use the `for each` loop to retrieve the results.\n\n### Syntax of the `queryDef` method with a `select` clause\n\n```xml\n<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>\n```\n\n### `Create` method\n\n#### Example 1: select records and write to the journal\n\nThe internal names of the workflows that are located in the **wfExamples** folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.\n\n```javascript\nvar query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )\n\nvar res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)\n```\n\n#### Example 2: delete records\n\nThe first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A `delete` operation is used to delete the selected records.\n\n```javascript\n// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)\n\n//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()\n\n//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id={rec.@id}/>)\n    }\n```\n\n#### Example 3: select records and write to the journal\n\nIn this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the **1234** folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.\n\n```javascript\nvar query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)\n\nvar res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)\n```\n\n### `Write` method\n\nYou can insert, update, and delete records. You can use the `Write` method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:\n\n* The `update` operation\n* The `insertOrUpdate` operation, with the `_key` argument to identify the record to be updated\n\n  If you do not specify the **Recipients** folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root **Recipients** folder.\n\n* The `delete` operation\n\n>[!IMPORTANT]\n> If you use Adobe Campaign v8, we recommend that you use the staging mechanism with the **Ingestion** and **Data update/delete** APIs for the `Write` method in a Snowflake table. [Read more](https://experienceleague.adobe.com/docs/campaign/campaign-v8/architecture/api/new-apis.html){target=\"_blank\"}.\n\n#### Example 1: insert or update a record\n\n```javascript\nxtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)\n```\n\n#### Example 2: delete records\n\nThis example combines a static method and a non-static method.\n\n```javascript\nvar query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);\n\nvar res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id={w.@id}/>\n);\n}\n```\n\nThis video shows how to use non-static API methods:\n>[!VIDEO](https://video.tv.adobe.com/v/18477/?learn=on)\n\nThis video shows an example of use of a non-static API method in a workflow:\n>[!VIDEO](https://video.tv.adobe.com/v/18476/?learn=on)\n\n## Related topics\n\n* [Data-oriented APIs](../../configuration/using/data-oriented-apis.md)\n* [JavaScript scripts and templates](javascript-scripts-and-templates.md)\n* [SOAP methods in JavaScript](../../configuration/using/soap-methods-in-javascript.md)\n\n### API documentation\n\n* [Samples of SOAP calls](https://experienceleague.adobe.com/developer/campaign-api/api/p-14.html)\n* Methods:\n  * [Create](https://experienceleague.adobe.com/developer/campaign-api/api/f-create.html)\n  * [DeleteCollection](https://experienceleague.adobe.com/developer/campaign-api/api/sm-session-DeleteCollection.html)\n  * [ExecuteQuery](https://experienceleague.adobe.com/developer/campaign-api/api/sm-queryDef-ExecuteQuery.html)\n  * [PostEvent](https://experienceleague.adobe.com/developer/campaign-api/api/sm-workflow-PostEvent.html)\n  * [Write](https://experienceleague.adobe.com/developer/campaign-api/api/sm-session-Write.html)\n* [logInfo function](https://experienceleague.adobe.com/developer/campaign-api/api/f-logInfo.html)\n","headers":[["title","Examples of JavaScript code in workflows"],["description","These examples show how you can use JavaScript code in a workflow"],["feature","Workflows"]],"sections":[{"section":"Examples of JavaScript code in workflows","sectionId":"06d5688d-7002-4088-a838-91a3bc2724d7","paragraphs":["These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more."]},{"section":"Example 1: write to the database","sectionId":"f75452d0-2e40-419c-b080-a474d7c9f755","paragraphs":["To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request."]},{"section":"Step 1: compose a write request","sectionId":"5c601969-010f-4a45-8059-a05dfe8204ef","paragraphs":["You can add, update, and delete records."]},{"section":"Insert a record","sectionId":"1fec2dff-284d-43fc-b38b-80e1442b661c","paragraphs":["Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>"]},{"section":"Update a record","sectionId":"3c2c2802-b041-42fc-87af-4f645ef59d05","paragraphs":["Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>"]},{"section":"Delete a record","sectionId":"8c81768e-4eb1-4a0f-970d-6865b6162180","paragraphs":["Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )"]},{"section":"Step 2: write the record","sectionId":"5e40cae6-06f6-49cf-8a2d-17b9967b151c","paragraphs":["Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO"]},{"section":"Example 2: query the database","sectionId":"b102fef4-7fa3-4304-8ec9-64dbac7efbe5","paragraphs":["To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query."]},{"section":"Step 1: compose a query","sectionId":"3732b868-3885-4213-b177-b1653596bd48","paragraphs":["Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>"]},{"section":"Step 2: create a query object","sectionId":"88f23ab6-58bf-48b4-90f4-6571e78b8c98","paragraphs":["To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity."]},{"section":"Step 3: run the query","sectionId":"9fa66720-6596-4553-80b3-7f4c15677f76","paragraphs":["Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO","Trigger a workflow","You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO","Interact with the database","These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method","Example 1: select records and write to the journal","The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)","Example 2: delete records","The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO","Related topics","Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript","API documentation","Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite"]},{"section":"Results of a `select` operation","sectionId":"ee847520-e1bd-4e16-ab21-247bc61b3556","paragraphs":["Examples of JavaScript code in workflows","These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more.","Example 1: write to the database","To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request.","Step 1: compose a write request","You can add, update, and delete records.","Insert a record","Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","Update a record","Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>","Delete a record","Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )","Step 2: write the record","Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO","Example 2: query the database","To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query.","Step 1: compose a query","Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>","Step 2: create a query object","To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity.","Step 3: run the query","Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO","Trigger a workflow","You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO","Interact with the database","These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method","Example 1: select records and write to the journal","The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)","Example 2: delete records","The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO","Related topics","Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript","API documentation","Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite"]},{"section":"Results of a `getIfExists` operation","sectionId":"572900b9-7565-473f-98d5-c7e97e659036","paragraphs":["Examples of JavaScript code in workflows","These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more.","Example 1: write to the database","To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request.","Step 1: compose a write request","You can add, update, and delete records.","Insert a record","Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","Update a record","Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>","Delete a record","Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )","Step 2: write the record","Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO","Example 2: query the database","To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query.","Step 1: compose a query","Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>","Step 2: create a query object","To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity.","Step 3: run the query","Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO","Trigger a workflow","You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO","Interact with the database","These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method","Example 1: select records and write to the journal","The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)","Example 2: delete records","The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO","Related topics","Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript","API documentation","Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite"]},{"section":"Result of a `get` operation","sectionId":"1a76090a-7565-44aa-a7b8-255594ea2fc6","paragraphs":["Examples of JavaScript code in workflows","These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more.","Example 1: write to the database","To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request.","Step 1: compose a write request","You can add, update, and delete records.","Insert a record","Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","Update a record","Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>","Delete a record","Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )","Step 2: write the record","Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO","Example 2: query the database","To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query.","Step 1: compose a query","Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>","Step 2: create a query object","To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity.","Step 3: run the query","Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO","Trigger a workflow","You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO","Interact with the database","These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method","Example 1: select records and write to the journal","The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)","Example 2: delete records","The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO","Related topics","Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript","API documentation","Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite"]},{"section":"Result of a `count` operation","sectionId":"1a7a94a8-1f7d-4a89-bb6b-c10ea2663455","paragraphs":["Examples of JavaScript code in workflows","These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more.","Example 1: write to the database","To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request.","Step 1: compose a write request","You can add, update, and delete records.","Insert a record","Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","Update a record","Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>","Delete a record","Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )","Step 2: write the record","Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO","Example 2: query the database","To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query.","Step 1: compose a query","Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>","Step 2: create a query object","To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity.","Step 3: run the query","Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO"]},{"section":"Trigger a workflow","sectionId":"ca44a98d-ed7b-4ed1-b676-a7c5ae38fb06","paragraphs":["You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO"]},{"section":"Interact with the database","sectionId":"4d751d03-f510-4da1-ad28-3c668139a65c","paragraphs":["These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method","Example 1: select records and write to the journal","The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)","Example 2: delete records","The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO","Related topics","Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript","API documentation","Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite"]},{"section":"Syntax of the `queryDef` method with a `select` clause","sectionId":"d31a6652-a140-4e35-8026-903dd5cc5502","paragraphs":["Examples of JavaScript code in workflows","These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more.","Example 1: write to the database","To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request.","Step 1: compose a write request","You can add, update, and delete records.","Insert a record","Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","Update a record","Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>","Delete a record","Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )","Step 2: write the record","Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO","Example 2: query the database","To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query.","Step 1: compose a query","Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>","Step 2: create a query object","To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity.","Step 3: run the query","Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO","Trigger a workflow","You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO","Interact with the database","These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method","Example 1: select records and write to the journal","The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)","Example 2: delete records","The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO","Related topics","Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript","API documentation","Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite"]},{"section":"`Create` method","sectionId":"d195ea38-847d-4cde-be19-209896a6bd77","paragraphs":["Examples of JavaScript code in workflows","These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more.","Example 1: write to the database","To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request.","Step 1: compose a write request","You can add, update, and delete records.","Insert a record","Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","Update a record","Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>","Delete a record","Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )","Step 2: write the record","Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO","Example 2: query the database","To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query.","Step 1: compose a query","Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>","Step 2: create a query object","To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity.","Step 3: run the query","Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO","Trigger a workflow","You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO","Interact with the database","These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method"]},{"section":"Example 1: select records and write to the journal","sectionId":"1ad69b05-1f1a-47db-ba3f-afe6a87817aa","paragraphs":["The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)"]},{"section":"Example 2: delete records","sectionId":"26ba335e-166d-423a-8319-d9863db08fcc","paragraphs":["The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }"]},{"section":"Example 3: select records and write to the journal","sectionId":"e1059c8d-4232-4d03-a737-85a1c7abe922","paragraphs":["In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO","Related topics","Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript","API documentation","Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite"]},{"section":"`Write` method","sectionId":"d4020ad3-b2ed-4cc7-9b1f-b043e705c9a7","paragraphs":["Examples of JavaScript code in workflows","These examples show how you can use JavaScript code in a workflow:","Write to the database\nQuery the database\nTrigger a workflow, using a static SOAP method\nInteract with the database, using a non-static SOAP method","Learn more about static and non-static SOAP methods.","In these examples, the ECMAScript for XML (E4X) extension is used. With this extension, you can combine JavaScript calls and XML primitives in the same script.","To try out these examples, follow these steps:","Create a workflow and add these activities to the workflow:","Start activity\nJavaScript code activity\nEnd activity","Learn more about building workflows.","Add the JavaScript code to an activity. Learn more.","Save the workflow.","Test the examples:","Start the workflow. Learn more.\nOpen the journal. Learn more.","Example 1: write to the database","To write to the database, you can use the static Write method on the xtk:session schema:","Compose a write request in XML.","Write the record:","Call the Write method on the xtk:session schema.","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Pass the XML code as an argument for the write request.","Step 1: compose a write request","You can add, update, and delete records.","Insert a record","Because the insert operation is the default operation, you do not need to specify it.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be populated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","Update a record","Use the _update operation. Learn more.","Specify this information as XML attributes:","The schema of the table to be modified\nThe table fields to be updated\nThe key argument that is required to identify the record to be updated","Example:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    status=\"Client\"\n    email=\"isabel.garcia@mycompany.com\"\n    operation=\"_update\"\n    _key=\"@email\"/>","Delete a record","Use the DeleteCollection method. Learn more.","Specify this information:","The schema of the table to be modified\nThe where clause that is required to identify the record to be updated, in the form of an XML element","Example:","xtk.session.DeleteCollection(\n    \"nms:recipient\",\n    <where>\n        <condition expr=\"[@email] = 'isabel.garcia@mycompany.com'\"/>\n    </where>,\n    false\n    )","Step 2: write the record","Call the non-static Write method on the xtk:session schema:","xtk.session.Write(myXML)","No value is returned for this method.","Add the complete code to a JavaScript code activity in the workflow:","var myXML = <recipient xtkschema=\"nms:recipient\"\n    firstName=\"Isabel\"\n    lastName=\"Garcia\"\n    email=\"isabel.garcia@mycompany.com\"/>","xtk.session.Write(myXML)","This video shows how to write to the database:","!VIDEO","Example 2: query the database","To query the database, you can use the non-static xtk:queryDef instance method:","Compose a query in XML.\nCreate a query object.\nRun the query.","Step 1: compose a query","Specify the XML code for a queryDef entity.","Syntax:","<queryDef schema=\"nms:recipient\" operation=\"\">\n    <!-- select, where, and orderBy clauses as XML elements -->\n</queryDef>","Specify this information:","The schema of the table to be read\nThe operation\nThe columns to be returned, in a select clause\nThe conditions, in a where clause\nThe filtering criteria, in an orderBy clause","You can use these operations:","Operation Result\nselect Zero or more elements are returned as a collection.\ngetIfExists One element is returned. If no match element exists, then an empty element is returned.\nget One element is returned. If no match element exists, then an error is returned.\ncount The number of matching records is returned in the form of an element with a count attribute.","Write the select, where, and orderBy clauses as XML elements:","select clause","Specify the columns to be returned. For example, to select the person's first name and last name, write this code:","<select>\n    <node expr=\"@firstName\"/>\n    <node expr=\"@lastName\"/>\n</select>","With the nms:recipient schema, elements are returned in this form:","<recipient firstName=\"Bo\" lastName=\"Didley\"/>","where clause","To specify conditions, use a where clause. For example, to select the records that are located in the Training folder, you can write this code:","<where>\n    <condition expr=\"[folder/@label]='Training'\"/>\n</where>","When combining multiple expressions, use the boolean operator in the first expression. For example, to select all the persons who are named Isabel Garcia, you can write this code:","<condition boolOperator=\"AND\" expr=\"@firstName='Isabel'\"/>\n<condition expr=\"@lastName='Garcia'\"/>","orderBy clause","To sort the result set, specify the orderBy clause as an XML element with the sortDesc attribute. For example, to sort the last names in ascending order, you can write this code:","<orderBy>\n    <node expr=\"@lastName> sortDesc=\"false\"/>\n</orderBy>","Step 2: create a query object","To create an entity from the XML code, use the create(content) method:","var query = xtk.queryDef.create(\n    <queryDef schema=\"nms:recipient\" operation=\"select\">\n    …\n    </queryDef>)","Prefix the create(content) method with the schema of the entity to be created.","The content argument is a string argument and is optional. This argument contains the XML code that describes the entity.","Step 3: run the query","Follow these steps:","Call the ExecuteQuery method on the queryDef entity:","var res = query.ExecuteQuery()","Process the results:","Iterate over the results of the select operation, using a loop construct.\nTest the results, using the getIfExists operation.\nCount the results, using the count operation.","Results of a select operation","All the matches are returned as a collection:","<recipient-collection>\n    <recipient email=\"jane.smith@mycompany.com\">\n    <recipient email=\"john.harris@mycompany.com\">\n</recipient-collection>","To iterate over the results, use the for each loop:","for each (var rcp in res:recipient)\n    logInfo(rcp.@email)","The loop includes a local recipient variable. For each recipient that is returned in the collection of recipients, the recipient's email is printed out. Learn more about the logInfo function.","Results of a getIfExists operation","Each match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an empty element is returned:","<recipient/>","You can refer to the primary key node—for example, the @id attribute:","if (res.@id !=undefined)\n    { // match was found\n    …\n    }","Result of a get operation","One match is returned as an element:","<recipient id=\"52,378,079\">","If there is no match, then an error is returned.","TIP","If you know that there is a match, use the get operation. Otherwise, use the getIfExists operation. If you use this best practice, then errors reveal unexpected problems. If you use the get operation, do not use the try…catch statement. The problem is handled by the error handling process of the workflow.","Result of a count operation","An element with the count attribute is returned:","<recipient count=\"200\">","To use the result, refer to the @count attribute:","if (res.@count > 0)\n    { // matches were found\n    …\n    }","For the select operation, add this code to a JavaScript code activity in the workflow:","var myXML =\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@firstName\"/>\n        <node expr=\"@lastName\"/>\n    </select>\n</queryDef>","var query = xtk.queryDef.create(myXML)","var res = query.ExecuteQuery()","for each (var rcp in res.recipient)\n    logInfo(rcp.@firstName + \" \" + rcp.@lastName)","Because the select operation is the default operation, you do not need to specify it.","This video shows how to read from the database:","!VIDEO","Trigger a workflow","You can trigger workflows programmatically, for example, in technical workflows or to process information that a user has entered on a web application page.","Workflow triggering works through the use of events. You can use these features for events:","To post an event, you can use the static PostEvent method. Learn more.\nTo receive an event, you can use the External signal activity. Learn more.","You can trigger workflows in different ways:","You can trigger a workflow inline, that is, from the main script of a JavaScript code activity.\nYou can trigger a workflow upon completion of another:Add an initialization script to the End activity of the initial workflow.","Add the External signal activity at the start of the target workflow.","Upon completion of the initial workflow, an event is posted. The outgoing transition is activated and the event variables are populated. Then, the event is received by the target workflow.","TIP","As a best practice, when you add a script to an activity, enclose the activity name in double hyphens, for example, -- end --. Learn more about workflow best practices.","Syntax of the PostEvent method:","PostEvent(\n    String     //ID of the target workflow\n    String     //Name of the target activity\n    String     //Name of the transition to be activated in case of multiple transitions\n    XML        //Event parameters, in the <variables/> element\n    Boolean    //To trigger the target workflow only once, set this parameter to true.\n)","In this example, upon completion of the workflow, a short text is passed to the signal activity of the wkfExampleReceiver workflow:","var strLabel = \"Adobe Campaign, Marketing that delivers\"\nxtk.workflow.PostEvent(\n    \"wkfExampleReceiver\",\n    \"signal\",\n    \"\",\n    <variables strLine=/>,\n    false)","Because the last parameter is set to false, the wkfExampleReceiver workflow is triggered every time the initial workflow is completed.","When you trigger workflows, bear these principles in mind:","The PostEvent command runs asynchronously. The command is placed on the server queue. The method returns after the event is posted.\nThe target workflow must be started. Otherwise, an error is written to the log file.\nIf the target workflow is suspended, then the PostEvent command is queued until the workflow resumes.\nThe triggered activity does not require that a task be in progress.","This video shows how to use static API methods:","!VIDEO","This video shows how to trigger workflows:","!VIDEO","Interact with the database","These examples show how to perform these actions:","Use the get and create methods on schemas to use non-static SOAP methods\nCreate methods that perform SQL queries\nUse the write method to insert, update, and delete records","Follow these steps:","Define the query:","Retrieve an entity by using the create method on the corresponding schema—for example, the xtk:workflow schema. Learn more.\nUse the queryDef method to issue an SQL query.","Run the query using the ExecuteQuery method. Learn more.","Use the for each loop to retrieve the results.","Syntax of the queryDef method with a select clause","<queryDef schema=\"schema_key\" operation=\"operation_type\">\n    <select>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </select>\n    <where> \n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </where>\n    <orderBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </orderBy>\n    <groupBy>\n        <node expr=\"expression1\">\n        <node sql=\"expression2\">\n    </groupBy>\n    <having>\n        <condition expr=\"expression1\"/> \n        <condition sql=\"expression2\"/>\n    </having>\n</queryDef>","Create method","Example 1: select records and write to the journal","The internal names of the workflows that are located in the wfExamples folder are selected. The results are sorted by internal name, in ascending order, and written to the journal.","var query = xtk.queryDef.create(\n    <queryDef schema=\"xtk:workflow\" operation=\"select\">\n        <select>\n            <node expr=\"@internalName\"/>\n        </select>\n        <where>\n            <condition expr=\"[folder/@name]='wfExamples'\"/>\n        </where>\n        <orderBy>\n            <node expr=\"@internalName\" sortDesc=\"false\"/>\n        </orderBy>\n    </queryDef>\n    )","var res = query.ExecuteQuery()\nfor each (var w in res.workflow)\n    logInfo(w.@internalName)","Example 2: delete records","The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more."]},{"section":"Example 1: insert or update a record","sectionId":"1c54b03e-6097-4ce1-a097-083424b11989","paragraphs":[]},{"section":"Example 2: delete records","sectionId":"bf93d462-93ba-4454-9909-4629bbdab040","paragraphs":["The first name, the last name, the email and the ID of all the recipients who are named Chris Smith are selected. The results are sorted by email, in ascending order, and written to the journal. A delete operation is used to delete the selected records.","// Build the query, create a query object and hold the object in a variable\nvar query = xtk.queryDef.create(\n        <queryDef schema=\"nms:recipient\" operation=\"select\">\n            <select>\n                <node expr=\"@firstName\"/>\n                <node expr=\"@lastName\"/>\n                <node expr=\"@email\"/>\n                <node expr=\"@id\"/>\n            </select>\n            <where>\n                <condition expr=\"[folder/@label]='Recipients'\"/>\n                <condition expr=\"[@lastName]='Smith'\"/>\n                <condition expr=\"[@firstName]='Chris'\"/>\n            </where>\n            <orderBy>\n                <node expr=\"@email\" sortDesc=\"false\"/>\n            </orderBy>\n        </queryDef>\n)","//Run the query using the ExecuteQuery method against the created object\nvar res = query.ExecuteQuery()","//Loop through the results, print out the person's name and email, then delete the records\nfor each (var rec in res.recipient)\n    {\n     logInfo(\"Delete record = Email: \" + rec.@email + ', ' + rec.@firstName + ' ' + rec.@lastName)\n     xtk.session.Write(<recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>)\n    }","Example 3: select records and write to the journal","In this example, a non-static method is used. The email and birth year of all the recipients whose information is stored in the 1234 folder and whose email domain name starts with \"adobe\" are selected. The results are sorted by birth date in descending order. The recipients' email is written to the journal.","var query = xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@email\"/>\n        <node sql=\"sEmail\"/>\n        <node expr=\"Year(@birthDate)\"/>\n    </select>\n    <where>\n        <condition expr=\"[@folder-id] = 1234 and @domain like 'adobe%'\"/>\n        <condition sql=\"iFolderId = 1234 and sDomain like 'adobe%'\"/>\n    </where>\n    <orderBy>\n        <node expr=\"@birthDate\" sortDesc=\"true\"/>\n    </orderBy>\n</queryDef>\n)","var res = query.ExecuteQuery()\nfor each (var w in res.recipient)\n    logInfo(w.@email)","Write method","You can insert, update, and delete records. You can use the Write method on any schema in Adobe Campaign. Because this method is static, you do not need to create an object. You can use these operations:","The update operation","The insertOrUpdate operation, with the _key argument to identify the record to be updated","If you do not specify the Recipients folder, then, if a match exists, the record is updated in any subfolder. Otherwise, the record is created in the root Recipients folder.","The delete operation","IMPORTANT\nIf you use Adobe Campaign v8, we recommend that you use the staging mechanism with the Ingestion and Data update/delete APIs for the Write method in a Snowflake table. Read more.","Example 1: insert or update a record","xtk.session.Write(\n<recipient\n    xtkschema=\"nms:recipient\"\n    _operation=\"insertOrUpdate\" _key=\"@email\"\n    lastName=\"Lennon\"\n    firstName=\"John\"\n    email=\"johnlennon@thebeatles.com\"\n/>\n)","Example 2: delete records","This example combines a static method and a non-static method.","var query=xtk.queryDef.create(\n<queryDef schema=\"nms:recipient\" operation=\"select\">\n    <select>\n        <node expr=\"@Id\"/>\n    </select>\n    <where>\n        <condition expr=\"[@email]='johnlennon@thebeatles.com'\"/>\n    </where>\n</queryDef>\n);","var res = query.ExecuteQuery()\nfor each (var w in res.recipient) {\nxtk.session.Write(\n    <recipient xtkschema=\"nms:recipient\" _operation=\"delete\" id=/>\n);\n}","This video shows how to use non-static API methods:","!VIDEO","This video shows an example of use of a non-static API method in a workflow:","!VIDEO"]},{"section":"Related topics","sectionId":"3aad33f3-1752-4dcb-83e3-5a70588d4066","paragraphs":["Data-oriented APIs\nJavaScript scripts and templates\nSOAP methods in JavaScript"]},{"section":"API documentation","sectionId":"b1acfc5c-3cc5-4dec-b4e6-c253b21bf79e","paragraphs":["Samples of SOAP calls\nMethods:Create\nDeleteCollection\nExecuteQuery\nPostEvent\nWrite","logInfo function"]}]}