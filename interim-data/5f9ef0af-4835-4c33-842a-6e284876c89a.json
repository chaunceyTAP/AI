{"guid":"5f9ef0af-4835-4c33-842a-6e284876c89a","title":"Database cleanup workflow","path":"help\\production\\using\\database-cleanup-workflow.md","fullText":"---\nproduct: campaign\ntitle: Database cleanup workflow\ndescription: Learn how obsolete data is automatically cleaned up\nfeature: Monitoring, Workflows\naudience: production\ncontent-type: reference\ntopic-tags: data-processing\nexl-id: 75d3a0af-9a14-4083-b1da-2c1b22f57cbe\n---\n# Database cleanup workflow{#database-cleanup-workflow}\n\n\n\n## Introduction {#introduction}\n\nThe **[!UICONTROL Database cleanup]** workflow accessible via the **[!UICONTROL Administration > Production > Technical workflows]** node, lets you delete obsolete data to avoid exponential growth of the database. The workflow is triggered automatically without user intervention.\n\n![cleanup](assets/ncs_cleanup_workflow.png)\n\n## Configuration {#configuration}\n\nThe database cleanup is configured on two levels: in the workflow scheduler and in the deployment wizard.\n\n### Workflow scheduler {#the-scheduler}\n\n>[!NOTE]\n>\n>For more on the scheduler, refer to [this section](../../workflow/using/scheduler.md).\n\nBy default, the **[!UICONTROL Database cleanup]** workflow is configured to start daily at 4AM. The scheduler lets you change the workflow triggering frequency. The following frequencies are available:\n\n* **[!UICONTROL Several times a day]** \n* **[!UICONTROL Daily]** \n* **[!UICONTROL Weekly]** \n* **[!UICONTROL Once]**\n\n![scheduler](assets/ncs_cleanup_scheduler.png)\n\n>[!IMPORTANT]\n>\n>In order for the **[!UICONTROL Database cleanup]** workflow to start at the date and time defined in the scheduler, the workflow engine (wfserver) must be started.\n\n### Deployment wizard {#deployment-wizard}\n\nThe **[!UICONTROL Deployment wizard]**, accessed via the **[!UICONTROL Tools > Advanced]** menu, lets you configure how long data is saved for. Values are expressed in days. If these values aren't altered, the workflow will use the default values. \n\n![](assets/ncs_cleanup_deployment-wizard.png)\n\nThe fields of the **[!UICONTROL Purge of data]** window coincide with the following options. These are used by some of the tasks executed by the **[!UICONTROL Database cleanup]** workflow:\n\n* Consolidated tracking: **NmsCleanup_TrackingStatPurgeDelay** (refer to [Cleanup of tracking logs](#cleanup-of-tracking-logs))\n* Delivery logs: **NmsCleanup_BroadLogPurgeDelay** (refer to [Cleanup of delivery logs](#cleanup-of-delivery-logs))\n* Tracking logs: **NmsCleanup_TrackingLogPurgeDelay** (refer to [Cleanup of tracking logs](#cleanup-of-tracking-logs))\n* Deleted deliveries: **NmsCleanup_RecycledDeliveryPurgeDelay** (refer to [Cleanup of deliveries to be deleted or recycled](#cleanup-of-deliveries-to-be-deleted-or-recycled))\n* Import rejects: **NmsCleanup_RejectsPurgeDelay** (refer to [Cleanup of rejects generated by imports](#cleanup-of-rejects-generated-by-imports-))\n* Visitor profiles: **NmsCleanup_VisitorPurgeDelay** (refer to [Cleanup of visitors](#cleanup-of-visitors))\n* Offer propositions: **NmsCleanup_PropositionPurgeDelay** (refer to [Cleanup of propositions](#cleanup-of-propositions))\n\n  >[!NOTE]\n  >\n  >The **[!UICONTROL Offer propositions]** field is only available when the **Interaction** module is installed.\n\n* Events: **NmsCleanup_EventPurgeDelay** (refer to [Cleansing expired events](#cleansing-expired-events))\n* Archived events: **NmsCleanup_EventHistoPurgeDelay** (refer to [Cleansing expired events](#cleansing-expired-events))\n\n  >[!NOTE]\n  >\n  >The **[!UICONTROL Events]** and **[!UICONTROL Archived events]** fields are only available if the **Message Center** module is installed.\n\n* Audit trail: **XtkCleanup_AuditTrailPurgeDelay** (refer to [Cleanup of Audit trail](#cleanup-of-audit-trail))\n\nAll tasks executed by the **[!UICONTROL Database cleanup]** workflow are described in the following section.\n\n## Tasks carried out by the Database cleanup workflow {#tasks-carried-out-by-the-database-cleanup-workflow}\n\nAt the date and time defined in the workflow scheduler (refer to [The scheduler](#the-scheduler)), the workflow engine starts the database cleanup process. The Database cleanup connects to the database and executes the tasks in the sequence shown below.\n\n>[!IMPORTANT]\n>\n>If one of these tasks fails, the next ones are not executed.   \n>\n>SQL queries with a **LIMIT** attribute are executed repeatedly until all information is processed.\n\n\n### Lists to delete cleanup {#lists-to-delete-cleanup}\n\nThe first task executed by the **[!UICONTROL Database cleanup]** workflow deletes all groups with the **deleteStatus != 0** attribute from the **NmsGroup**. Records linked to these groups and which exist in other tables are also deleted.\n\n1. Lists to be deleted are recovered using the following SQL query:\n\n   ```sql\n   SELECT iGroupId, sLabel, iType FROM NmsGroup WHERE iDeleteStatus <> 0 OR tsExpirationDate <= GetDate() \n   ```\n\n1. Each list has several links to other tables. All of these links are deleted in bulk using the following query:\n\n   ```sql\n   DELETE FROM $(relatedTable) WHERE iGroupId=$(l) IN (SELECT iGroupId FROM $(relatedTable) WHERE iGroupId=$(l) LIMIT 5000) \n   ```\n\n   where `$(relatedTable)` is a table related to **NmsGroup** and `$(l)` is the list identifier.\n\n1. When the list is a 'List' type list, the associated table is deleted using the following query:\n\n   ```sql\n   DROP TABLE grp$(l)\n   ```\n\n1. Every **Select** type list recovered by the operation is deleted using the following query:\n\n   ```sql\n   DELETE FROM NmsGroup WHERE iGroupId=$(l) \n   ```\n\n   where `$(l)` is the list identifier\n\n### Cleanup of deliveries to be deleted or recycled {#cleanup-of-deliveries-to-be-deleted-or-recycled}\n\nThis task purges all deliveries to be deleted or recycled.\n\n1. The **[!UICONTROL Database cleanup]** workflow selects all deliveries for which the **deleteStatus** field has the value **[!UICONTROL Yes]** or **[!UICONTROL Recycled]** and whose delete date is earlier than the period defined in the **[!UICONTROL Deleted deliveries]** (**NmsCleanup_RecycledDeliveryPurgeDelay**) field of the deployment wizard. For more on this, refer to [Deployment wizard](#deployment-wizard). This period is calculated in relation to the current server date. \n1. For each mid-sourcing server, the task selects the list of deliveries to be deleted. \n1. The **[!UICONTROL Database cleanup]** workflow deletes delivery logs, attachments, mirror page information and all other related data. \n1. Before deleting the delivery for good, the workflow purges linked information from the following tables:\n\n    * In the delivery exclusion table (**NmsDlvExclusion**), the following query is used:\n\n      ```sql  \n      DELETE FROM NmsDlvExclusion WHERE iDeliveryId=$(l)\n      ```    \n    \n      where **$(l)** is the identifier of the delivery. \n    \n    * In the coupon table (**NmsCouponValue**), the following query is used (with mass-deletions):\n\n      ```sql\n      DELETE FROM NmsCouponValue WHERE iMessageId IN (SELECT iMessageId FROM NmsCouponValue WHERE EXISTS (SELECT B.iBroadLogId FROM $(BroadLogTableName) B WHERE B.iDeliveryId = $(l) AND B.iBroadLogId = iMessageId ) LIMIT 5000)\n      \n      ```    \n    \n      where `$(l)` is the identifier of the delivery.\n    \n    * In the delivery log tables (**NmsBroadlogXxx**), mass-deletions are executed in batches of 20,000 records.\n    * In the offer proposition tables (**NmsPropositionXxx**), mass-deletions are executed in batches of 20,000 records.\n    * In the tracking log tables (**NmsTrackinglogXxx**), mass-deletions are executed in batches of 20,000 records.\n    * In the delivery fragment table (**NmsDeliveryPart**), mass-deletions are executed in batches of 500,000 records. This table contains personalization information on the remaining messages to be delivered. \n    * In the mirror page data fragment table (**NmsMirrorPageInfo**), mass-deletions are executed in batches of 20,000 records for expired delivery parts and for finished or cancelled ones. This table contains personalization information on all messages used for generating mirror pages. \n    * In the mirror page search table (**NmsMirrorPageSearch**), mass-deletions are executed in batches of 20,000 records. This table is a search index which provides access to personalization information stored in the **NmsMirrorPageInfo** table. \n    * In the batch process log table (**XtkJobLog**), mass-deletions are executed in batches of 20,000 records. This table contains the log of deliveries to be deleted. \n    * In the delivery URL tracking table (**NmsTrackingUrl**), the following query is used:\n\n      ```sql\n      DELETE FROM NmsTrackingUrl WHERE iDeliveryId=$(l)\n      ```    \n    \n      where `$(l)` is the identifier of the delivery.\n\n      This table contains the URLs found in the deliveries to be deleted to enable their tracking.\n\n1. The delivery is deleted from the delivery table (**NmsDelivery**):\n\n   ```sql\n   DELETE FROM NmsDelivery WHERE iDeliveryId = $(l)\n   ```\n\n   where `$(l)` is the identifier of the delivery.\n\n#### Deliveries using mid-sourcing {#deliveries-using-mid-sourcing}\n\nThe **[!UICONTROL Database cleanup]** workflow also deletes deliveries on the mid-sourcing server(s).\n\n1. To do this, the workflow checks that each delivery is inactive (based on its status). If a delivery is active, it will be stopped before it is deleted. The check is carried out by executing the following query:\n\n   ```sql\n   SELECT iState FROM NmsDelivery WHERE iDeliveryId = $(l) AND iState <> 100;\n   ```\n\n   where **$(l)** is the identifier of the delivery.\n\n1. If the value of the status is **[!UICONTROL Start pending]** , **[!UICONTROL In progress]** , **[!UICONTROL Recovery pending]** , **[!UICONTROL Recovery in progress]** , **[!UICONTROL Pause requested]** , **[!UICONTROL Pause in progress]** , or **[!UICONTROL Paused]** (values 51, 55, 61, 62, 71, 72, 75), the delivery is stopped and the task purges the linked information.\n\n### Cleanup of expired deliveries {#cleanup-of-expired-deliveries}\n\nThis task stops deliveries whose validity period has expired.\n\n1. The **[!UICONTROL Database cleanup]** workflow creates the list of deliveries which have expired. This list includes all expired deliveries with a status other than **[!UICONTROL Finished]** , as well as recently stopped deliveries with over 10,000 non-processed messages. The following query is used:\n\n   ```sql\n   SELECT iDeliveryId, iState FROM NmsDelivery WHERE iDeleteStatus=0 AND iIsModel=0 AND iDeliveryMode=1 AND ( (iState >= 51 AND iState < 85 AND tsValidity IS NOT NULL AND tsValidity < $(currentDate) ) OR (iState = 85 AND DateMinusDays(15) < tsLastModified AND iToDeliver - iProcessed >= 10000 ))\n   ```\n\n   where `delivery mode 1` matches the **[!UICONTROL Mass delivery]** mode, `state 51` matches the **[!UICONTROL Start pending]** state, `state 85` matches the **[!UICONTROL Stopped]** state, and the highest number of delivery logs mass-updated on the delivery server equals 10,000.\n\n1. The workflow then includes the list of recently expired deliveries which use mid-sourcing. Deliveries for which no delivery logs have yet been recovered via the mid-sourcing server are excluded.\n\n   The following query is used:\n\n   ```sql\n   SELECT iDeliveryId, tsValidity, iMidRemoteId, mData FROM NmsDelivery WHERE (iDeliveryMode = 4 AND (iState = 85 OR iState = 95) AND tsValidity IS NOT NULL AND (tsValidity < SubDays(GetDate() , 15) OR tsValidity < $(DateOfLastLogPullUp)) AND tsLastModified > SubDays(GetDate() , 15))\n   ```\n\n1. The following query is used to detect whether or not the external account is still active, for filtering deliveries by date:\n\n   ```sql\n   SELECT iExtAccountId FROM NmsExtAccount WHERE iActive<>0 AND sName=$(providerName)\n   ```\n\n1. In the list of expired deliveries, delivery logs whose status is **[!UICONTROL Pending]** , switch to **[!UICONTROL Delivery cancelled]** , and all deliveries in this list switch to **[!UICONTROL Finished]** .\n\n   The following queries are used:\n\n   ```sql\n   UPDATE $(BroadLogTableName) SET tsLastModified=$(curdate), iStatus=7, iMsgId=$(bl) WHERE iDeliveryId=$(dl) AND iStatus=6\n   ```\n\n   where `$(curdate)`is the current date of the database server, `$(bl)` is the identifier of the delivery logs message, `$(dl)` is the delivery identifier, `delivery status 6` matches the **[!UICONTROL Pending]** status and `delivery status 7` matches the **[!UICONTROL Delivery cancelled]** status.\n\n   ```sql\n   UPDATE NmsDelivery SET iState = 95, tsLastModified = $(curdate), tsBroadEnd = tsValidity WHERE iDeliveryId = $(dl)\n   ```\n\n   where `delivery state 95` matches the **[!UICONTROL Finished]** status, and `$(dl)` is the identifier of the delivery.\n\n1. All fragments (**deliveryParts**) of obsolete deliveries are deleted and all obsolete fragments of notification deliveries in progress are deleted. Mass-deletion is used for both these tasks.\n\n   The following queries are used:\n\n   ```sql\n   DELETE FROM NmsDeliveryPart WHERE iDeliveryPartId IN (SELECT iDeliveryPartId FROM NmsDeliveryPart WHERE iDeliveryId IN (SELECT iDeliveryId FROM NmsDelivery WHERE iState=95 OR iState=85) LIMIT 5000)\n   ```\n\n   ```sql\n   DELETE FROM NmsDeliveryPart WHERE iDeliveryPartId IN (SELECT iDeliveryPartId FROM NmsDeliveryPart WHERE tsValidity < $(curDate) LIMIT 500000)\n   ```\n\n   where `delivery state 95` matches the **[!UICONTROL Finished]** status, `delivery state 85` matches the **[!UICONTROL Stopped]** status, and `$(curDate)` is the current server date.\n\n### Cleanup of mirror pages {#cleanup-of-mirror-pages}\n\nThis task deletes the web resources (mirror pages) used by deliveries.\n\n1. First of all, the list of deliveries to be purged is recovered using the following query:\n\n   ```sql\n   SELECT iDeliveryId, iNeedMirrorPage FROM NmsDelivery WHERE iWebResPurged = 0 AND tsWebValidity IS NOT NULL AND tsWebValidity < $(curdate)\n   ```\n\n   where `$(curDate)` is the current server date.\n\n1. The **NmsMirrorPageInfo** table is then purged, if necessary using the identifier of the previously recovered delivery. Mass-deletion is used to generate the following queries:\n\n   ```sql\n   DELETE FROM NmsMirrorPageInfo WHERE iMirrorPageInfoId IN (SELECT iMirrorPageInfoId FROM NmsMirrorPageInfo WHERE iDeliveryId = $(dl)) LIMIT 5000\n   ```\n\n   ```sql\n   DELETE FROM NmsMirrorPageSearch WHERE iMessageId IN (SELECT iMessageId FROM NmsMirrorPageSearch WHERE iDeliveryId = $(dl)) LIMIT 5000\n   ```\n\n   where `$(dl)` is the identifier of the delivery.\n\n1. An entry is then added to the delivery log.\n1. Purged deliveries are then identified, to avoid having to reprocess them later. The following query is executed:\n\n   ```sql\n   UPDATE NmsDelivery SET iWebResPurged = 1 WHERE iDeliveryId IN ($(strIn))\n   ```\n\n   where `$(strIn)` is the list of delivery identifiers.\n\n### Cleanup of work tables {#cleanup-of-work-tables}\n\nThis task deletes from the database, all work tables which match deliveries whose status is **[!UICONTROL Being edited]** , **[!UICONTROL Stopped]** or **[!UICONTROL Deleted]** .\n\n1. The list of tables with names beginning with **wkDlv_** is recovered first with the following query (postgresql):\n\n   ```sql\n   SELECT relname FROM pg_class WHERE relname LIKE Lower('wkDlv_%') ESCAPE E'\\\\' AND relkind IN ('r','v') AND pg_get_userbyid(relowner)<>'postgres'\n   ```\n\n1. The tables used by workflows in progress are then excluded. To do this, the list of deliveries in progress is recovered using the following query:\n\n   ```sql\n   SELECT iDeliveryId FROM NmsDelivery WHERE iDeliveryId<>0 AND iDeleteStatus=0 AND iState NOT IN (0,85,100);\n   ```\n\n   where `0` is the value which matches the **[!UICONTROL Being edited]** delivery status, `85` matches the **[!UICONTROL Stopped]** status and `100` matches the **[!UICONTROL Deleted]** status. \n\n1. Tables that are no longer used will be deleted using the following query:\n\n   ```sql\n   DROP TABLE wkDlv_15487_1;\n   ```\n\n### Cleanup of rejects generated by imports {#cleanup-of-rejects-generated-by-imports-}\n\nThis step lets you delete records for which all data wasn't processed during import.\n\n1. Mass-deletion is carried out on the **XtkReject** table with the following query:\n\n   ```sql\n   DELETE FROM XtkReject WHERE iRejectId IN (SELECT iRejectId FROM XtkReject WHERE tsLog < $(curDate)) LIMIT $(l)\n   ```\n\n   where `$(curDate)` is the current server date from which we subtract the period defined for the **NmsCleanup_RejectsPurgeDelay** option (refer to [Deployment wizard](#deployment-wizard)) and `$(l)` is the maximum number of records to be mass deleted.\n\n1. All orphan rejects are then deleted using the following query:\n\n   ```sql\n   DELETE FROM XtkReject WHERE iJobId NOT IN (SELECT iJobId FROM XtkJob)\n   ```\n\n### Cleanup of workflow instances {#cleanup-of-workflow-instances}\n\nThis task purges each workflow instance using its identifer (**lWorkflowId**) and history (**lHistory**). It deletes inactive tables by running the worktable cleanup task again. The cleanup also deletes all orphaned worktables (wkf% and wkfhisto%) of deleted workflows.\n\n>[!NOTE]\n>\n>The purge frequency of the history is specified for each workflow in the **History in days** field (default value 30 days). This field can be found in the **Execution** tab of the workflow properties. For more on this, refer to [this section](../../workflow/using/workflow-properties.md#execution).\n\n1. To recover the list of workflows to be deleted, the following query is used:\n\n   ```sql\n   SELECT iWorkflowId, iHistory FROM XtkWorkflow WHERE iWorkflowId<>0\n   ```\n\n1. This query generates the list of workflows which will be used to delete all linked logs, finished tasks and finished events, using the following queries:\n\n   ```sql\n   DELETE FROM XtkWorkflowLog WHERE iWorkflowId=$(lworkflow) AND tsLog < DateMinusDays($(lhistory))\n   ```\n\n   ```sql\n   DELETE FROM XtkWorkflowTask WHERE iWorkflowId=$(lworkflow) AND iStatus<>0 AND tsCompletion < DateMinusDays($(lhistory)) \n   ```\n\n   ```sql\n   DELETE FROM XtkWorkflowEvent WHERE iWorkflowId=$(l) AND iStatus>2 AND tsProcessing < DateMinusDays($(lHistory))\n   ```\n\n   where `$(lworkflow)` is the identifier of the workflow and `$(lhistory)` is the identifier of the history.\n\n1. All unused tables are deleted. For this purpose, all tables are collected thanks to a **wkf%** type mask using the following query (postgresql):\n\n   ```sql\n   SELECT relname FROM pg_class WHERE relname LIKE Lower('wkf%') ESCAPE E'\\\\' AND relkind IN ('r','v') AND pg_get_userbyid(relowner)<>'postgres'\n   ```\n\n1. Then all tables used by a pending workflow instance are excluded. The list of active workflows is recovered using the following query:\n\n   ```sql\n   SELECT iWorkflowId FROM XtkWorkflow WHERE iWorkflowId<>0 AND iState<>20\n   ```\n\n1. Each workflow identifier is then recovered to find the name of the tables used by workflows in progress. These names are excluded from the list of previously recovered tables.\n1. \"incremental query\" type activity history tables are excluded using the following queries:\n\n   ```sql\n   SELECT relname FROM pg_class WHERE relname LIKE Lower('wkfhisto%') ESCAPE E'\\\\' AND relkind IN ('r','v') AND pg_get_userbyid(relowner)<>'postgres'\n   ```\n\n   ```sql\n   SELECT iWorkflowId FROM XtkWorkflow WHERE iWorkflowId IN ($(strCondition))\n   ```\n\n   where `$(strcondition)` is the list of tables which match the **wkfhisto%** mask.\n\n1. The remaining tables are deleted using the following query:\n\n   ```sql\n   DROP TABLE wkf15487_12;\n   ```\n\n### Cleanup of workflow logins {#cleanup-of-workflow-logins}\n\nThis task deletes workflow logins using the following query:\n\n```sql\nDELETE FROM XtkWorkflowLogin WHERE iWorkflowId NOT IN (SELECT iWorkflowId FROM XtkWorkflow)\n```\n\n### Cleanup of orphan work tables {#cleanup-of-orphan-work-tables}\n\nThis task deletes orphan work tables linked to groups. The **NmsGroup** table stores the groups to be cleansed (with a type different from 0). The prefix of the table names is **grp**. To identify the groups to be cleansed, the following query is used:\n\n```sql\nSELECT iGroupId FROM NmsGroup WHERE iType>0\"\n```\n\n### Cleanup of visitors {#cleanup-of-visitors}\n\nThis task deletes obsolete records from the visitor table using mass-deletion. Obsolete records are those for which the last modification is earlier than the conservation period defined in the deployment wizard (refer to [Deployment wizard](#deployment-wizard)). The following query is used:\n\n```sql\nDELETE FROM NmsVisitor WHERE iVisitorId IN (SELECT iVisitorId FROM NmsVisitor WHERE iRecipientId = 0 AND tsLastModified < AddDays(GetDate(), -30) AND iOrigin = 0 LIMIT 20000)\n```\n\nwhere `$(tsDate)` is the current server date, from which we subtract the period defined for the **NmsCleanup_VisitorPurgeDelay** option.\n\n### Cleanup of NPAI {#cleanup-of-npai}\n\nThis task lets you delete records which match valid addresses from the **NmsAddress** table. The following query is used to perform mass-deletion:\n\n```sql\nDELETE FROM NmsAddress WHERE iAddressId IN (SELECT iAddressId FROM NmsAddress WHERE iStatus=2 AND tsLastModified < $(tsDate1) AND tsLastModified >= $(tsDate2) LIMIT 5000)\n```\n\nwhere `status 2` matches the **[!UICONTROL Valid]** status, `$(tsDate1)` is the current server date, and `$(tsDate2)` matches the **NmsCleanup_LastCleanup** option.\n\n### Cleanup of subscriptions {#cleanup-of-subscriptions-}\n\nThis task purges all subscriptions deleted by the user from the **NmsSubscription** table, using mass-deletion. The following query is used:\n\n```sql\nDELETE FROM NmsSubscription WHERE iDeleteStatus <>0\n```\n\n### Cleanup of tracking logs {#cleanup-of-tracking-logs}\n\nThis task deletes obsolete records from the tracking and webtracking log tables. Obsolete records are those which are earlier than the conservation period defined in the deployment wizard (refer to [Deployment wizard](#deployment-wizard)).\n\n1. First, the list of tracking log tables is recovered using the following query:\n\n   ```sql\n   SELECT distinct(sTrackingLogSchema) FROM NmsDeliveryMapping WHERE sTrackingLogSchema IS NOT NULL;\n   ```\n\n1. Mass-deletion is used to purge all tables in the list of previously recovered tables. The following query is used:\n\n   ```sql\n   DELETE FROM NmsTrackingLogRcp WHERE iTrackingLogId IN (SELECT iTrackingLogId FROM NmsTrackingLogRcp WHERE tsLog < $(tsDate) LIMIT 5000) \n   ```\n\n   where `$(tsDate)` is the current server date from which we subtract the period defined for the **NmsCleanup_TrackingLogPurgeDelay** option.\n\n1. The tracking statistics table is purged using mass-deletion. The following query is used:\n\n   ```sql\n   DELETE FROM NmsTrackingStats WHERE iTrackingStatsId IN (SELECT iTrackingStatsId FROM NmsTrackingStats WHERE tsStart < $(tsDate) LIMIT 5000) \n   ```\n\n   where `$(tsDate)` is the current server date from which we subtract the period defined for the **NmsCleanup_TrackingStatPurgeDelay** option.\n\n### Cleanup of delivery logs {#cleanup-of-delivery-logs}\n\nThis task lets you purge the delivery logs stored in various tables.\n\n1. For this purpose, the list of delivery log schemas is recovered using the following query:\n\n   ```sql\n   SELECT distinct(sBroadLogSchema) FROM NmsDeliveryMapping WHERE sBroadLogSchema IS NOT NULL UNION SELECT distinct(sBroadLogExclSchema) FROM NmsDeliveryMapping WHERE sBroadLogExclSchema IS NOT NULL\n   ```\n\n1. When using mid-sourcing, the **NmsBroadLogMid** table isn't referenced in delivery mappings. The **nms:broadLogMid** schema is added to the list recovered by the previous query.\n1. The **Database cleanup** workflow then purges obsolete data from previously recovered tables. The following query is used:\n\n   ```sql\n   DELETE FROM $(tableName) WHERE iBroadLogId IN (SELECT iBroadLogId FROM $(tableName) WHERE tsLastModified < $(option) LIMIT 5000) \n   ```\n\n   where `$(tableName)` is the name of each table in the list of schemas, and `$(option)` is the date defined for the **NmsCleanup_BroadLogPurgeDelay** option (refer to [Deployment wizard](#deployment-wizard)).\n\n1. Finally, the workflow checks whether the **NmsProviderMsgId** table exists. If so, all obsolete data is deleted using the following query:\n\n   ```sql\n   DELETE FROM NmsProviderMsgId WHERE iBroadLogId IN (SELECT iBroadLogId FROM NmsProviderMsgId WHERE tsCreated < $(option) LIMIT 5000)\n   ```\n\n   where `$(option)` matches the date defined for the **NmsCleanup_BroadLogPurgeDelay** option (refer to [Deployment wizard](#deployment-wizard)).\n\n### Cleanup of the NmsEmailErrorStat table {#cleanup-of-the-nmsemailerrorstat-table-}\n\nThis task cleanses the **NmsEmailErrorStat** table. The main program (**coalesceErrors**) defines two dates:\n\n* **Start date**: date of the next process which matches the **NmsLastErrorStatCoalesce** option or the most recent date in the table.\n* **End date**: current server date.\n\nIf the start date is greater than or equal to the end date, no process will take place. In this case, the **coalesceUpToDate** message appears.\n\nIf the start date is earlier than the end date, the **NmsEmailErrorStat** table is cleansed.\n\nThe total number of errors in the **NmsEmailErrorStat** table, between the start and end dates, is recovered using the following query:\n\n```sql\nSELECT COUNT(*) FROM NmsEmailErrorStat WHERE tsDate>= $(start) AND tsDate< $(end)\n```\n\nwhere `$end` and `$start` are the start and end dates defined previously.\n\nIf the total is greater than 0:\n\n1. The following query is executed in order to keep only errors beyond a certain threshold (which equals 20):\n\n   ```sql\n   SELECT iMXIP, iPublicId, SUM(iTotalConnections), SUM(iTotalErrors), SUM(iMessageErrors), SUM(iAbortedConnections), SUM(iFailedConnections), SUM(iRefusedConnections), SUM(iTimeoutConnections) FROM NmsEmailErrorStat WHERE tsDate>=$(start ) AND tsDate<$(end ) GROUP BY iMXIP, iPublicId HAVING SUM(iTotalErrors) >= 20\n   ```\n\n1. The **coalescingErrors** message is displayed.\n1. A new connection is created to delete all errors which occurred between the start and end dates. The following query is used:\n\n   ```sql\n   DELETE FROM NmsEmailErrorStat WHERE tsDate>=$(start) AND tsDate<$(end)\n   ```\n\n1. Each error is saved in the **NmsEmailErrorStat** table using the following query:\n\n   ```sql\n   INSERT INTO NmsEmailErrorStat(iMXIP, iPublicId, tsDate, iTotalConnections, iTotalErrors, iTimeoutConnections, iRefusedConnections, iAbortedConnections, iFailedConnections, iMessageErrors) VALUES($(lmxip ), $(lpublicId ), $(tsstart ), $(lconnections ), $(lconnectionErrors ),$(ltimeoutConnections ), $(lrefusedConnections ), $(labortedConnections ), $(lfailedConnections ), $(lmessageErrors))\n   ```\n\n   where each variable matches a value recovered by the previous query. \n\n1. The **start** variable is updated with the values of the previous process to finish the loop.\n\nThe loop and the task stop.\n\nCleanups are executed on the **NmsEmailError** and **cleanupNmsMxDomain** tables.\n\n### Cleanup of the NmsEmailError table {#cleanup-of-the-nmsemailerror-table-}\n\nThe following query is used:\n\n```sql\nDELETE FROM NmsEmailError WHERE iMXIP NOT IN (SELECT DISTINCT iMXIP FROM NmsEmailErrorStat)\n```\n\nThis query deletes all lines without linked records in the **NmsEmailErrorStat** from the **NmsEmailError** table.\n\n### Cleanup of the NmsMxDomain table {#cleanup-of-the-nmsmxdomain-table-}\n\nThe following query is used:\n\n```sql\nDELETE FROM NmsMxDomain WHERE iMXIP NOT IN (SELECT DISTINCT iMXIP FROM NmsEmailErrorStat)\n```\n\nThis query deletes all lines without a linked record in the **NmsEmailErrorStat** table from the **NmsMxDomain** table.\n\n### Cleanup of propositions {#cleanup-of-propositions}\n\nIf the **Interaction** module is installed, this task is executed to purge the **NmsPropositionXxx** tables.\n\nThe list of propositions tables is recovered and mass-deletion is carried out on each one, using the following query:\n\n```sql\nDELETE FROM NmsPropositionXxx WHERE iPropositionId IN (SELECT iPropositionId FROM NmsPropositionXxx WHERE tsLastModified < $(option) LIMIT 5000) \n```\n\nwhere `$(option)` is the date defined for the **NmsCleanup_PropositionPurgeDelay** option (refer to [Deployment wizard](#deployment-wizard)).\n\n### Cleanup of simulation tables {#cleanup-of-simulation-tables}\n\nThis task cleanses orphan simulation tables (that are no longer linked to an offer simulation or a delivery simulation).\n\n1. To recover the list of simulations that require cleanup, the following query is used:\n\n   ```sql\n   SELECT iSimulationId FROM NmsSimulation WHERE iSimulationId<>0\n   ```\n\n1. The name of the tables to delete is made up of the **wkSimu_** prefix followed by the identifier of the simulation (for instance: **wkSimu_456831_aggr**):\n\n   ```sql\n   DROP TABLE wkSimu_456831_aggr\n   ```\n\n### Cleanup of Audit trail {#cleanup-of-audit-trail}\n\nThe following query is used:\n\n```sql\nDELETE FROM XtkAudit WHERE tsChanged < $(tsDate)\n```\n\nwhere **$(tsDate)** is the current server date from which the period defined for the **XtkCleanup_AuditTrailPurgeDelay** option is subtracted.\n\n### Cleanup of Nmsaddress {#cleanup-of-nmsaddress}\n\nThe following query is used:\n\n```sql\nDELETE FROM NmsAddress WHERE iAddressId IN (SELECT iAddressId FROM NmsAddress WHERE iStatus=STATUS_QUARANTINE AND tsLastModified < $(NmsCleanup_AppSubscriptionRcpPurgeDelay + 5d) AND iType IN (MESSAGETYPE_IOS, MESSAGETYPE_ANDROID ) LIMIT 5000)\n```\n\nThis query deletes all entries related to iOS and Android.\n\n### Statistics update and storage optimization {#statistics-update}\n\nThe **XtkCleanup_NoStats** option allows you to control the behavior of the storage optimization step of the cleanup workflow.\n\nIf the **XtkCleanup_NoStats** option does not exist or if its value is 0, this will execute the storage optimization in verbose mode (VACUUM VERBOSE ANALYZE) on PostgreSQL and update statistics on all other databases. To make sure that this command is executed, check the PostgreSQL logs. VACUUM will output lines in the format: `INFO: vacuuming \"public.nmsactivecontact\"` and ANALYZE will output lines in the format: `INFO: analyzing \"public.nmsactivecontact\"`.\n\nIf the value of the option is 1, statistics updating isn't executed on any database. The following log line will appear in the workflow logs: `Option 'XtkCleanup_NoStats' is set to '1'`.\n\nIf the value of the option is 2, this will execute the storage analysis in verbose mode (ANALYZE VERBOSE) on PostgreSQL and update statistics on all other databases. To make sure that this command is executed, check the PostgreSQL logs. ANALYZE will output lines in the format: `INFO: analyzing \"public.nmsactivecontact\"`.\n\n### Subscription cleanup (NMAC) {#subscription-cleanup--nmac-}\n\nThis task deletes any subscriptions related to deleted services or mobile applications.\n\nTo recover the list of broadlog schemas, the following query is used:\n\n```sql\nSELECT distinct(sBroadLogSchema) FROM NmsDeliveryMapping WHERE sBroadLogSchema IS NOT NULL\n```\n\nThe task then recovers the names of the tables linked to the **appSubscription** link and deletes these tables.\n\nThis cleanup workflow also deletes all entries where idisabled = 1 that have not been updated since the time set in the **NmsCleanup_AppSubscriptionRcpPurgeDelay** option.\n\n### Cleansing session information {#cleansing-session-information}\n\nThis task cleanses information from the **sessionInfo** table, the following query is used:\n\n```sql\nDELETE FROM XtkSessionInfo WHERE tsexpiration < $(curdate) \n```\n\n### Cleansing expired events {#cleansing-expired-events}\n\nThis task cleanses the events received and stored on the execution instances and the events archived on a control instance.\n\n### Cleansing reactions {#cleansing-reactions}\n\nThis task cleanses the reactions (table **NmsRemaMatchRcp**) in which the hypotheses have themselves been deleted.\n","headers":[["title","Database cleanup workflow"],["description","Learn how obsolete data is automatically cleaned up"],["feature","Monitoring, Workflows"],["topic-tags","data-processing"]],"sections":[{"section":"Database cleanup workflow","sectionId":"903e290c-c2f7-46ba-b3c9-d91f18300448","paragraphs":[]},{"section":"Introduction","sectionId":"232e621d-cf9f-4a82-a07c-d6e508cd757f","paragraphs":["The Database cleanup workflow accessible via the Administration > Production > Technical workflows node, lets you delete obsolete data to avoid exponential growth of the database. The workflow is triggered automatically without user intervention.","cleanup"]},{"section":"Configuration","sectionId":"44910b1b-75c2-4f63-a6c7-dfa0c5e28951","paragraphs":["The database cleanup is configured on two levels: in the workflow scheduler and in the deployment wizard."]},{"section":"Workflow scheduler","sectionId":"204717b3-e622-425c-9db0-0cfa26bb8c39","paragraphs":["NOTE","For more on the scheduler, refer to this section.","By default, the Database cleanup workflow is configured to start daily at 4AM. The scheduler lets you change the workflow triggering frequency. The following frequencies are available:","Several times a day \nDaily \nWeekly \nOnce","scheduler","IMPORTANT","In order for the Database cleanup workflow to start at the date and time defined in the scheduler, the workflow engine (wfserver) must be started."]},{"section":"Deployment wizard","sectionId":"5f5390d1-4682-4bc5-9adf-9185917e8cf8","paragraphs":["The Deployment wizard, accessed via the Tools > Advanced menu, lets you configure how long data is saved for. Values are expressed in days. If these values aren't altered, the workflow will use the default values.","The fields of the Purge of data window coincide with the following options. These are used by some of the tasks executed by the Database cleanup workflow:","Consolidated tracking: NmsCleanup_TrackingStatPurgeDelay (refer to Cleanup of tracking logs)","Delivery logs: NmsCleanup_BroadLogPurgeDelay (refer to Cleanup of delivery logs)","Tracking logs: NmsCleanup_TrackingLogPurgeDelay (refer to Cleanup of tracking logs)","Deleted deliveries: NmsCleanup_RecycledDeliveryPurgeDelay (refer to Cleanup of deliveries to be deleted or recycled)","Import rejects: NmsCleanup_RejectsPurgeDelay (refer to Cleanup of rejects generated by imports)","Visitor profiles: NmsCleanup_VisitorPurgeDelay (refer to Cleanup of visitors)","Offer propositions: NmsCleanup_PropositionPurgeDelay (refer to Cleanup of propositions)","NOTE","The Offer propositions field is only available when the Interaction module is installed.","Events: NmsCleanup_EventPurgeDelay (refer to Cleansing expired events)","Archived events: NmsCleanup_EventHistoPurgeDelay (refer to Cleansing expired events)","NOTE","The Events and Archived events fields are only available if the Message Center module is installed.","Audit trail: XtkCleanup_AuditTrailPurgeDelay (refer to Cleanup of Audit trail)","All tasks executed by the Database cleanup workflow are described in the following section."]},{"section":"Tasks carried out by the Database cleanup workflow","sectionId":"90fa5904-7937-4d06-8583-35e21091b419","paragraphs":["At the date and time defined in the workflow scheduler (refer to The scheduler), the workflow engine starts the database cleanup process. The Database cleanup connects to the database and executes the tasks in the sequence shown below.","IMPORTANT","If one of these tasks fails, the next ones are not executed.","SQL queries with a LIMIT attribute are executed repeatedly until all information is processed."]},{"section":"Lists to delete cleanup","sectionId":"84f50aa2-5781-453c-8c2f-c9806aa1b927","paragraphs":["The first task executed by the Database cleanup workflow deletes all groups with the deleteStatus != 0 attribute from the NmsGroup. Records linked to these groups and which exist in other tables are also deleted.","Lists to be deleted are recovered using the following SQL query:","SELECT iGroupId, sLabel, iType FROM NmsGroup WHERE iDeleteStatus <> 0 OR tsExpirationDate <= GetDate()","Each list has several links to other tables. All of these links are deleted in bulk using the following query:","DELETE FROM $(relatedTable) WHERE iGroupId=$(l) IN (SELECT iGroupId FROM $(relatedTable) WHERE iGroupId=$(l) LIMIT 5000)","where $(relatedTable) is a table related to NmsGroup and $(l) is the list identifier.","When the list is a 'List' type list, the associated table is deleted using the following query:","DROP TABLE grp$(l)","Every Select type list recovered by the operation is deleted using the following query:","DELETE FROM NmsGroup WHERE iGroupId=$(l)","where $(l) is the list identifier"]},{"section":"Cleanup of deliveries to be deleted or recycled","sectionId":"244816bb-1d9d-490c-bf00-73a50e9d495d","paragraphs":["This task purges all deliveries to be deleted or recycled.","The Database cleanup workflow selects all deliveries for which the deleteStatus field has the value Yes or Recycled and whose delete date is earlier than the period defined in the Deleted deliveries (NmsCleanup_RecycledDeliveryPurgeDelay) field of the deployment wizard. For more on this, refer to Deployment wizard. This period is calculated in relation to the current server date.","For each mid-sourcing server, the task selects the list of deliveries to be deleted.","The Database cleanup workflow deletes delivery logs, attachments, mirror page information and all other related data.","Before deleting the delivery for good, the workflow purges linked information from the following tables:","In the delivery exclusion table (NmsDlvExclusion), the following query is used:","DELETE FROM NmsDlvExclusion WHERE iDeliveryId=$(l)","where $(l) is the identifier of the delivery.","In the coupon table (NmsCouponValue), the following query is used (with mass-deletions):","DELETE FROM NmsCouponValue WHERE iMessageId IN (SELECT iMessageId FROM NmsCouponValue WHERE EXISTS (SELECT B.iBroadLogId FROM $(BroadLogTableName) B WHERE B.iDeliveryId = $(l) AND B.iBroadLogId = iMessageId ) LIMIT 5000)","where $(l) is the identifier of the delivery.","In the delivery log tables (NmsBroadlogXxx), mass-deletions are executed in batches of 20,000 records.","In the offer proposition tables (NmsPropositionXxx), mass-deletions are executed in batches of 20,000 records.","In the tracking log tables (NmsTrackinglogXxx), mass-deletions are executed in batches of 20,000 records.","In the delivery fragment table (NmsDeliveryPart), mass-deletions are executed in batches of 500,000 records. This table contains personalization information on the remaining messages to be delivered.","In the mirror page data fragment table (NmsMirrorPageInfo), mass-deletions are executed in batches of 20,000 records for expired delivery parts and for finished or cancelled ones. This table contains personalization information on all messages used for generating mirror pages.","In the mirror page search table (NmsMirrorPageSearch), mass-deletions are executed in batches of 20,000 records. This table is a search index which provides access to personalization information stored in the NmsMirrorPageInfo table.","In the batch process log table (XtkJobLog), mass-deletions are executed in batches of 20,000 records. This table contains the log of deliveries to be deleted.","In the delivery URL tracking table (NmsTrackingUrl), the following query is used:","DELETE FROM NmsTrackingUrl WHERE iDeliveryId=$(l)","where $(l) is the identifier of the delivery.","This table contains the URLs found in the deliveries to be deleted to enable their tracking.","The delivery is deleted from the delivery table (NmsDelivery):","DELETE FROM NmsDelivery WHERE iDeliveryId = $(l)","where $(l) is the identifier of the delivery."]},{"section":"Deliveries using mid-sourcing","sectionId":"f47dcada-a89d-41cf-b004-c6d1811f04a8","paragraphs":["The Database cleanup workflow also deletes deliveries on the mid-sourcing server(s).","To do this, the workflow checks that each delivery is inactive (based on its status). If a delivery is active, it will be stopped before it is deleted. The check is carried out by executing the following query:","SELECT iState FROM NmsDelivery WHERE iDeliveryId = $(l) AND iState <> 100;","where $(l) is the identifier of the delivery.","If the value of the status is Start pending , In progress , Recovery pending , Recovery in progress , Pause requested , Pause in progress , or Paused (values 51, 55, 61, 62, 71, 72, 75), the delivery is stopped and the task purges the linked information."]},{"section":"Cleanup of expired deliveries","sectionId":"fa0e7016-8e98-4f6b-83e1-18a53154f733","paragraphs":["This task stops deliveries whose validity period has expired.","The Database cleanup workflow creates the list of deliveries which have expired. This list includes all expired deliveries with a status other than Finished , as well as recently stopped deliveries with over 10,000 non-processed messages. The following query is used:","SELECT iDeliveryId, iState FROM NmsDelivery WHERE iDeleteStatus=0 AND iIsModel=0 AND iDeliveryMode=1 AND ( (iState >= 51 AND iState < 85 AND tsValidity IS NOT NULL AND tsValidity < $(currentDate) ) OR (iState = 85 AND DateMinusDays(15) < tsLastModified AND iToDeliver - iProcessed >= 10000 ))","where delivery mode 1 matches the Mass delivery mode, state 51 matches the Start pending state, state 85 matches the Stopped state, and the highest number of delivery logs mass-updated on the delivery server equals 10,000.","The workflow then includes the list of recently expired deliveries which use mid-sourcing. Deliveries for which no delivery logs have yet been recovered via the mid-sourcing server are excluded.","The following query is used:","SELECT iDeliveryId, tsValidity, iMidRemoteId, mData FROM NmsDelivery WHERE (iDeliveryMode = 4 AND (iState = 85 OR iState = 95) AND tsValidity IS NOT NULL AND (tsValidity < SubDays(GetDate() , 15) OR tsValidity < $(DateOfLastLogPullUp)) AND tsLastModified > SubDays(GetDate() , 15))","The following query is used to detect whether or not the external account is still active, for filtering deliveries by date:","SELECT iExtAccountId FROM NmsExtAccount WHERE iActive<>0 AND sName=$(providerName)","In the list of expired deliveries, delivery logs whose status is Pending , switch to Delivery cancelled , and all deliveries in this list switch to Finished .","The following queries are used:","UPDATE $(BroadLogTableName) SET tsLastModified=$(curdate), iStatus=7, iMsgId=$(bl) WHERE iDeliveryId=$(dl) AND iStatus=6","where $(curdate)is the current date of the database server, $(bl) is the identifier of the delivery logs message, $(dl) is the delivery identifier, delivery status 6 matches the Pending status and delivery status 7 matches the Delivery cancelled status.","UPDATE NmsDelivery SET iState = 95, tsLastModified = $(curdate), tsBroadEnd = tsValidity WHERE iDeliveryId = $(dl)","where delivery state 95 matches the Finished status, and $(dl) is the identifier of the delivery.","All fragments (deliveryParts) of obsolete deliveries are deleted and all obsolete fragments of notification deliveries in progress are deleted. Mass-deletion is used for both these tasks.","The following queries are used:","DELETE FROM NmsDeliveryPart WHERE iDeliveryPartId IN (SELECT iDeliveryPartId FROM NmsDeliveryPart WHERE iDeliveryId IN (SELECT iDeliveryId FROM NmsDelivery WHERE iState=95 OR iState=85) LIMIT 5000)","DELETE FROM NmsDeliveryPart WHERE iDeliveryPartId IN (SELECT iDeliveryPartId FROM NmsDeliveryPart WHERE tsValidity < $(curDate) LIMIT 500000)","where delivery state 95 matches the Finished status, delivery state 85 matches the Stopped status, and $(curDate) is the current server date."]},{"section":"Cleanup of mirror pages","sectionId":"458c3eaf-131c-4238-95cd-dadafa89fd6f","paragraphs":["This task deletes the web resources (mirror pages) used by deliveries.","First of all, the list of deliveries to be purged is recovered using the following query:","SELECT iDeliveryId, iNeedMirrorPage FROM NmsDelivery WHERE iWebResPurged = 0 AND tsWebValidity IS NOT NULL AND tsWebValidity < $(curdate)","where $(curDate) is the current server date.","The NmsMirrorPageInfo table is then purged, if necessary using the identifier of the previously recovered delivery. Mass-deletion is used to generate the following queries:","DELETE FROM NmsMirrorPageInfo WHERE iMirrorPageInfoId IN (SELECT iMirrorPageInfoId FROM NmsMirrorPageInfo WHERE iDeliveryId = $(dl)) LIMIT 5000","DELETE FROM NmsMirrorPageSearch WHERE iMessageId IN (SELECT iMessageId FROM NmsMirrorPageSearch WHERE iDeliveryId = $(dl)) LIMIT 5000","where $(dl) is the identifier of the delivery.","An entry is then added to the delivery log.","Purged deliveries are then identified, to avoid having to reprocess them later. The following query is executed:","UPDATE NmsDelivery SET iWebResPurged = 1 WHERE iDeliveryId IN ($(strIn))","where $(strIn) is the list of delivery identifiers."]},{"section":"Cleanup of work tables","sectionId":"af5a92ae-72bb-4e33-8a9a-f8f62f9d940c","paragraphs":["This task deletes from the database, all work tables which match deliveries whose status is Being edited , Stopped or Deleted .","The list of tables with names beginning with wkDlv_ is recovered first with the following query (postgresql):","SELECT relname FROM pg_class WHERE relname LIKE Lower('wkDlv_%') ESCAPE E'\\\\' AND relkind IN ('r','v') AND pg_get_userbyid(relowner)<>'postgres'","The tables used by workflows in progress are then excluded. To do this, the list of deliveries in progress is recovered using the following query:","SELECT iDeliveryId FROM NmsDelivery WHERE iDeliveryId<>0 AND iDeleteStatus=0 AND iState NOT IN (0,85,100);","where 0 is the value which matches the Being edited delivery status, 85 matches the Stopped status and 100 matches the Deleted status.","Tables that are no longer used will be deleted using the following query:","DROP TABLE wkDlv_15487_1;"]},{"section":"Cleanup of rejects generated by imports","sectionId":"b4fc1090-910a-4476-a0fb-a0efdaacfcd4","paragraphs":["This step lets you delete records for which all data wasn't processed during import.","Mass-deletion is carried out on the XtkReject table with the following query:","DELETE FROM XtkReject WHERE iRejectId IN (SELECT iRejectId FROM XtkReject WHERE tsLog < $(curDate)) LIMIT $(l)","where $(curDate) is the current server date from which we subtract the period defined for the NmsCleanup_RejectsPurgeDelay option (refer to Deployment wizard) and $(l) is the maximum number of records to be mass deleted.","All orphan rejects are then deleted using the following query:","DELETE FROM XtkReject WHERE iJobId NOT IN (SELECT iJobId FROM XtkJob)"]},{"section":"Cleanup of workflow instances","sectionId":"5501e7c5-58cf-469b-b160-a361b82a598e","paragraphs":["This task purges each workflow instance using its identifer (lWorkflowId) and history (lHistory). It deletes inactive tables by running the worktable cleanup task again. The cleanup also deletes all orphaned worktables (wkf% and wkfhisto%) of deleted workflows.","NOTE","The purge frequency of the history is specified for each workflow in the History in days field (default value 30 days). This field can be found in the Execution tab of the workflow properties. For more on this, refer to this section.","To recover the list of workflows to be deleted, the following query is used:","SELECT iWorkflowId, iHistory FROM XtkWorkflow WHERE iWorkflowId<>0","This query generates the list of workflows which will be used to delete all linked logs, finished tasks and finished events, using the following queries:","DELETE FROM XtkWorkflowLog WHERE iWorkflowId=$(lworkflow) AND tsLog < DateMinusDays($(lhistory))","DELETE FROM XtkWorkflowTask WHERE iWorkflowId=$(lworkflow) AND iStatus<>0 AND tsCompletion < DateMinusDays($(lhistory))","DELETE FROM XtkWorkflowEvent WHERE iWorkflowId=$(l) AND iStatus>2 AND tsProcessing < DateMinusDays($(lHistory))","where $(lworkflow) is the identifier of the workflow and $(lhistory) is the identifier of the history.","All unused tables are deleted. For this purpose, all tables are collected thanks to a wkf% type mask using the following query (postgresql):","SELECT relname FROM pg_class WHERE relname LIKE Lower('wkf%') ESCAPE E'\\\\' AND relkind IN ('r','v') AND pg_get_userbyid(relowner)<>'postgres'","Then all tables used by a pending workflow instance are excluded. The list of active workflows is recovered using the following query:","SELECT iWorkflowId FROM XtkWorkflow WHERE iWorkflowId<>0 AND iState<>20","Each workflow identifier is then recovered to find the name of the tables used by workflows in progress. These names are excluded from the list of previously recovered tables.","\"incremental query\" type activity history tables are excluded using the following queries:","SELECT relname FROM pg_class WHERE relname LIKE Lower('wkfhisto%') ESCAPE E'\\\\' AND relkind IN ('r','v') AND pg_get_userbyid(relowner)<>'postgres'","SELECT iWorkflowId FROM XtkWorkflow WHERE iWorkflowId IN ($(strCondition))","where $(strcondition) is the list of tables which match the wkfhisto% mask.","The remaining tables are deleted using the following query:","DROP TABLE wkf15487_12;"]},{"section":"Cleanup of workflow logins","sectionId":"b5f1ac14-0cbe-45d1-b51c-39cd561cbb38","paragraphs":["This task deletes workflow logins using the following query:","DELETE FROM XtkWorkflowLogin WHERE iWorkflowId NOT IN (SELECT iWorkflowId FROM XtkWorkflow)"]},{"section":"Cleanup of orphan work tables","sectionId":"ef723a9f-94e4-463b-815b-fdbb83aee933","paragraphs":["This task deletes orphan work tables linked to groups. The NmsGroup table stores the groups to be cleansed (with a type different from 0). The prefix of the table names is grp. To identify the groups to be cleansed, the following query is used:","SELECT iGroupId FROM NmsGroup WHERE iType>0\""]},{"section":"Cleanup of visitors","sectionId":"edeb059f-d47c-45ec-bf37-d3544d3ceb30","paragraphs":["This task deletes obsolete records from the visitor table using mass-deletion. Obsolete records are those for which the last modification is earlier than the conservation period defined in the deployment wizard (refer to Deployment wizard). The following query is used:","DELETE FROM NmsVisitor WHERE iVisitorId IN (SELECT iVisitorId FROM NmsVisitor WHERE iRecipientId = 0 AND tsLastModified < AddDays(GetDate(), -30) AND iOrigin = 0 LIMIT 20000)","where $(tsDate) is the current server date, from which we subtract the period defined for the NmsCleanup_VisitorPurgeDelay option."]},{"section":"Cleanup of NPAI","sectionId":"613b7bfa-0574-48ce-8a9b-69bbd58bf655","paragraphs":["This task lets you delete records which match valid addresses from the NmsAddress table. The following query is used to perform mass-deletion:","DELETE FROM NmsAddress WHERE iAddressId IN (SELECT iAddressId FROM NmsAddress WHERE iStatus=2 AND tsLastModified < $(tsDate1) AND tsLastModified >= $(tsDate2) LIMIT 5000)","where status 2 matches the Valid status, $(tsDate1) is the current server date, and $(tsDate2) matches the NmsCleanup_LastCleanup option."]},{"section":"Cleanup of subscriptions","sectionId":"381de70b-59a2-4f72-bb11-204b0da2acf4","paragraphs":["This task purges all subscriptions deleted by the user from the NmsSubscription table, using mass-deletion. The following query is used:","DELETE FROM NmsSubscription WHERE iDeleteStatus <>0"]},{"section":"Cleanup of tracking logs","sectionId":"e215b02d-2bd4-4bd8-80d0-787defc8d762","paragraphs":["This task deletes obsolete records from the tracking and webtracking log tables. Obsolete records are those which are earlier than the conservation period defined in the deployment wizard (refer to Deployment wizard).","First, the list of tracking log tables is recovered using the following query:","SELECT distinct(sTrackingLogSchema) FROM NmsDeliveryMapping WHERE sTrackingLogSchema IS NOT NULL;","Mass-deletion is used to purge all tables in the list of previously recovered tables. The following query is used:","DELETE FROM NmsTrackingLogRcp WHERE iTrackingLogId IN (SELECT iTrackingLogId FROM NmsTrackingLogRcp WHERE tsLog < $(tsDate) LIMIT 5000)","where $(tsDate) is the current server date from which we subtract the period defined for the NmsCleanup_TrackingLogPurgeDelay option.","The tracking statistics table is purged using mass-deletion. The following query is used:","DELETE FROM NmsTrackingStats WHERE iTrackingStatsId IN (SELECT iTrackingStatsId FROM NmsTrackingStats WHERE tsStart < $(tsDate) LIMIT 5000)","where $(tsDate) is the current server date from which we subtract the period defined for the NmsCleanup_TrackingStatPurgeDelay option."]},{"section":"Cleanup of delivery logs","sectionId":"0795312a-a5a7-40a1-a465-fbf6c4419029","paragraphs":["This task lets you purge the delivery logs stored in various tables.","For this purpose, the list of delivery log schemas is recovered using the following query:","SELECT distinct(sBroadLogSchema) FROM NmsDeliveryMapping WHERE sBroadLogSchema IS NOT NULL UNION SELECT distinct(sBroadLogExclSchema) FROM NmsDeliveryMapping WHERE sBroadLogExclSchema IS NOT NULL","When using mid-sourcing, the NmsBroadLogMid table isn't referenced in delivery mappings. The nms:broadLogMid schema is added to the list recovered by the previous query.","The Database cleanup workflow then purges obsolete data from previously recovered tables. The following query is used:","DELETE FROM $(tableName) WHERE iBroadLogId IN (SELECT iBroadLogId FROM $(tableName) WHERE tsLastModified < $(option) LIMIT 5000)","where $(tableName) is the name of each table in the list of schemas, and $(option) is the date defined for the NmsCleanup_BroadLogPurgeDelay option (refer to Deployment wizard).","Finally, the workflow checks whether the NmsProviderMsgId table exists. If so, all obsolete data is deleted using the following query:","DELETE FROM NmsProviderMsgId WHERE iBroadLogId IN (SELECT iBroadLogId FROM NmsProviderMsgId WHERE tsCreated < $(option) LIMIT 5000)","where $(option) matches the date defined for the NmsCleanup_BroadLogPurgeDelay option (refer to Deployment wizard)."]},{"section":"Cleanup of the NmsEmailErrorStat table","sectionId":"9c9d264d-403b-41d2-8767-007893330f06","paragraphs":["This task cleanses the NmsEmailErrorStat table. The main program (coalesceErrors) defines two dates:","Start date: date of the next process which matches the NmsLastErrorStatCoalesce option or the most recent date in the table.\nEnd date: current server date.","If the start date is greater than or equal to the end date, no process will take place. In this case, the coalesceUpToDate message appears.","If the start date is earlier than the end date, the NmsEmailErrorStat table is cleansed.","The total number of errors in the NmsEmailErrorStat table, between the start and end dates, is recovered using the following query:","SELECT COUNT(*) FROM NmsEmailErrorStat WHERE tsDate>= $(start) AND tsDate< $(end)","where $end and $start are the start and end dates defined previously.","If the total is greater than 0:","The following query is executed in order to keep only errors beyond a certain threshold (which equals 20):","SELECT iMXIP, iPublicId, SUM(iTotalConnections), SUM(iTotalErrors), SUM(iMessageErrors), SUM(iAbortedConnections), SUM(iFailedConnections), SUM(iRefusedConnections), SUM(iTimeoutConnections) FROM NmsEmailErrorStat WHERE tsDate>=$(start ) AND tsDate<$(end ) GROUP BY iMXIP, iPublicId HAVING SUM(iTotalErrors) >= 20","The coalescingErrors message is displayed.","A new connection is created to delete all errors which occurred between the start and end dates. The following query is used:","DELETE FROM NmsEmailErrorStat WHERE tsDate>=$(start) AND tsDate<$(end)","Each error is saved in the NmsEmailErrorStat table using the following query:","INSERT INTO NmsEmailErrorStat(iMXIP, iPublicId, tsDate, iTotalConnections, iTotalErrors, iTimeoutConnections, iRefusedConnections, iAbortedConnections, iFailedConnections, iMessageErrors) VALUES($(lmxip ), $(lpublicId ), $(tsstart ), $(lconnections ), $(lconnectionErrors ),$(ltimeoutConnections ), $(lrefusedConnections ), $(labortedConnections ), $(lfailedConnections ), $(lmessageErrors))","where each variable matches a value recovered by the previous query.","The start variable is updated with the values of the previous process to finish the loop.","The loop and the task stop.","Cleanups are executed on the NmsEmailError and cleanupNmsMxDomain tables."]},{"section":"Cleanup of the NmsEmailError table","sectionId":"df905868-1abf-47a7-baaa-f3532db804b4","paragraphs":["The following query is used:","DELETE FROM NmsEmailError WHERE iMXIP NOT IN (SELECT DISTINCT iMXIP FROM NmsEmailErrorStat)","This query deletes all lines without linked records in the NmsEmailErrorStat from the NmsEmailError table."]},{"section":"Cleanup of the NmsMxDomain table","sectionId":"511f3cdd-b95f-4874-8cbc-39caeeba845d","paragraphs":["The following query is used:","DELETE FROM NmsMxDomain WHERE iMXIP NOT IN (SELECT DISTINCT iMXIP FROM NmsEmailErrorStat)","This query deletes all lines without a linked record in the NmsEmailErrorStat table from the NmsMxDomain table."]},{"section":"Cleanup of propositions","sectionId":"7c1d521d-536a-4844-9222-d20d97d4b2e9","paragraphs":["If the Interaction module is installed, this task is executed to purge the NmsPropositionXxx tables.","The list of propositions tables is recovered and mass-deletion is carried out on each one, using the following query:","DELETE FROM NmsPropositionXxx WHERE iPropositionId IN (SELECT iPropositionId FROM NmsPropositionXxx WHERE tsLastModified < $(option) LIMIT 5000)","where $(option) is the date defined for the NmsCleanup_PropositionPurgeDelay option (refer to Deployment wizard)."]},{"section":"Cleanup of simulation tables","sectionId":"921c5d1b-e7c9-4117-92d6-56e0f202a32d","paragraphs":["This task cleanses orphan simulation tables (that are no longer linked to an offer simulation or a delivery simulation).","To recover the list of simulations that require cleanup, the following query is used:","SELECT iSimulationId FROM NmsSimulation WHERE iSimulationId<>0","The name of the tables to delete is made up of the wkSimu_ prefix followed by the identifier of the simulation (for instance: wkSimu_456831_aggr):","DROP TABLE wkSimu_456831_aggr"]},{"section":"Cleanup of Audit trail","sectionId":"44817b9e-099f-4390-83ed-3fac3d4409f3","paragraphs":["The following query is used:","DELETE FROM XtkAudit WHERE tsChanged < $(tsDate)","where $(tsDate) is the current server date from which the period defined for the XtkCleanup_AuditTrailPurgeDelay option is subtracted."]},{"section":"Cleanup of Nmsaddress","sectionId":"51db9432-0a88-4d13-96ba-36f0c682f46f","paragraphs":["The following query is used:","DELETE FROM NmsAddress WHERE iAddressId IN (SELECT iAddressId FROM NmsAddress WHERE iStatus=STATUS_QUARANTINE AND tsLastModified < $(NmsCleanup_AppSubscriptionRcpPurgeDelay + 5d) AND iType IN (MESSAGETYPE_IOS, MESSAGETYPE_ANDROID ) LIMIT 5000)","This query deletes all entries related to iOS and Android."]},{"section":"Statistics update and storage optimization","sectionId":"ecb61e29-a6e2-49e0-9c55-02ff74c4baba","paragraphs":["The XtkCleanup_NoStats option allows you to control the behavior of the storage optimization step of the cleanup workflow.","If the XtkCleanup_NoStats option does not exist or if its value is 0, this will execute the storage optimization in verbose mode (VACUUM VERBOSE ANALYZE) on PostgreSQL and update statistics on all other databases. To make sure that this command is executed, check the PostgreSQL logs. VACUUM will output lines in the format: INFO: vacuuming \"public.nmsactivecontact\" and ANALYZE will output lines in the format: INFO: analyzing \"public.nmsactivecontact\".","If the value of the option is 1, statistics updating isn't executed on any database. The following log line will appear in the workflow logs: Option 'XtkCleanup_NoStats' is set to '1'.","If the value of the option is 2, this will execute the storage analysis in verbose mode (ANALYZE VERBOSE) on PostgreSQL and update statistics on all other databases. To make sure that this command is executed, check the PostgreSQL logs. ANALYZE will output lines in the format: INFO: analyzing \"public.nmsactivecontact\"."]},{"section":"Subscription cleanup (NMAC)","sectionId":"405122dd-1f67-40e7-b1a4-9f8f76a2b9ba","paragraphs":["This task deletes any subscriptions related to deleted services or mobile applications.","To recover the list of broadlog schemas, the following query is used:","SELECT distinct(sBroadLogSchema) FROM NmsDeliveryMapping WHERE sBroadLogSchema IS NOT NULL","The task then recovers the names of the tables linked to the appSubscription link and deletes these tables.","This cleanup workflow also deletes all entries where idisabled = 1 that have not been updated since the time set in the NmsCleanup_AppSubscriptionRcpPurgeDelay option."]},{"section":"Cleansing session information","sectionId":"e230a51d-357f-4228-9b51-8d4fff9a9ed9","paragraphs":["This task cleanses information from the sessionInfo table, the following query is used:","DELETE FROM XtkSessionInfo WHERE tsexpiration < $(curdate)"]},{"section":"Cleansing expired events","sectionId":"5e160ebb-d906-4a5b-a86c-f8b8fd218edb","paragraphs":["This task cleanses the events received and stored on the execution instances and the events archived on a control instance."]},{"section":"Cleansing reactions","sectionId":"df2b5024-ed7f-4409-91e0-70de3e59b193","paragraphs":["This task cleanses the reactions (table NmsRemaMatchRcp) in which the hypotheses have themselves been deleted."]}]}